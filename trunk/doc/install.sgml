<!doctype linuxdoc system>
<report>
<title>Installation of APC Action Applications
<author>Moritz Both, <tt/mb@aldebaran.de/
<date>2000/08/01, v0.9
<abstract>
"Big picture" description of the installation process of the APC Action
Applications
</abstract>

<toc>




<chapt>Introduction
<sect>Overview
<p>
The APC Action Applications provide easy automated publishing for
non-profit WWW sites and 'Usenet-like' sharing of articles between sites.

Action Applications consist of
<itemize>
<item>actual www pages which display the content. These pages can be
designed individually. At one spot, they contain an "include" directive
which is automatically replaced by the current content whenever a user
requests this page, and
<item>a database engine including a permission system, a storage and a content
managing system. This system has a www interface and administrators,
editors and authors of a certain page can do their work completely using
that interface.
</itemize>

<sect>Slices<label id="slices">
<p>
Action Applications provide something called <em/slices/ which represent
one <em/application/ each. Each application/slice has its own content,
its own configuration, permissions, and so on. If you run the Action
Applications on a server, you can set up such slices for your users and
grant individual <em/slice administration rights/. Users are then
administering their respective slices in every way.

Slices are of a certain <em/type/. There are currently seven slice types
implemented within the Action Applications:
<itemize>
<item>News
<item>Action Alerts
<item>Event Listings
<item>Press Release Publisher
<item>Job Listing
<item>Address List and
<item>Media Monitoring.
</itemize>
Slice types differ in information field names, number of fields and
default presentation. Still, all the slice types work basically in the 
same way. It is possible to add your own slice type if those do not
suit your needs.

<sect>Users, Roles and Permissions
<p>
Action Applications provides its own user management engine. Authentication
and authorization are implemented by a permission system which supports
two different back ends: LDAP and SQL. You are free to choose which back end
you want to use. In either case, it is possible to create groups of users
and groups of groups. Privileges which are granted to the group will 
be promoted to all its members.

There are five roles:
<descrip>
<tag/Reader./Readers do not need to have user accounts in the Action Applications permission
	system. Most of the times, they actually do not realize that they
	have to do with something like the Action Applications. They just
	view regular WWW pages and can read the information provided by
	the Action Application slice owners.
<tag/Author./Authors must have user accounts in the Action Applications permission system.
	The role "author" is bound to a certain slice. Any Action Applications user who
	has "author" privileges for an Action Applications slice can submit new information
	items for this slice and remove and edit her own submissions.
<tag/Editor./Editors must have user accounts in the Action Applications permission system.
	The role "editor" is bound to a certain slice. An Action Applications user who
	has "editor" privileges for an Action Applications slice can do everything an
	author for this slice can. Additionally, she can pick items 
	from other slices, and edit, approve or expire every
	item her slice, which includes other authors' items, as well. 
	An editor has full control over
	items which were published in her slice, but cannot modify the full 
	text of items imported from other slices (the so called ?fed items?).
<tag/Administrator./Administrators must have user accounts in the Action Applications 
	permission system. The role "administrator" is bound to a certain slice.
	An Action Applications user who has "administrator" privileges for an Action Applications slice can do 
	everything an editor for this slice can. Additionally, 
	she can set or change the
	configuration of her slice. The administrator can design the layout of the web site, define which
	categories are used in the slice and from and to which other slices items are shared. She also
	sets which parameters are predefined and which can be modified by the authors/editors of the
      slice.
<tag/Super Administrator./Super administrators must have user accounts in
	the Action Applications permission system. The role "super administrator" is <em/not/
	bound to a slice. Super administrators (superadmins) can do
	everything. This means, they can do anything a slice administrator
	can, but for <em/every/ slice; additionally, they can add slices
	to the system.
</descrip>

Permission management can generally be done by everyone for roles
below their own level.

<sect>Action Applications Software Components
<p>
Action Applications consist of several software components. Only
one of them is provided by the APC Action Applications package:
<itemize>
<item>The APC Action Application software. These are basically a set of 
PHP scripts running within a web server.
<item>A database server.
The database server
does not have to be on the same host as the other components. It can
be used for other applications as well.
<item>Optionally a LDAP server. LDAP provides access control to the Action Applications. 
It is possible
to use a different permission system, such as a SQL database based one. LDAP
has the advantage of being a universal directory service whose information
can be used by other applications, such as address books or email delivery
services, too.
<!-- I just spilled some beer over my keyboard. I'm afraid the Ctrl keys
now act as if they were F1 :-/ -->
<item>A WWW Server. The WWW Server provides the access from
the network via the http protocol. It runs the Action Applications programs
whenever someone accesses the Action Application controlled pages.
<item>PHP3. The PHP interpreter is needed to execute the Action Applications PHP scripts.
</itemize>
See section <ref id="requirements" 
name="Requirements / Preconditions / Suggested Environment"> 
for details about the installation of all the components.

<sect>Conventions used in this document
<p>
Command line input is shown including the command line prompt so it is
clear which lines should be typed in. The prompt
indicates if a command should be run as a normal user or as root: For 
normal users, the prompt is <tt/%/, and for root, the prompt is <tt/#/.

An example is shown below:
<tscreen><code>
% uptime
</code></tscreen>





<chapt>Requirements / Preconditions / Suggested Environment<label id="requirements">

<sect>Hardware Requirements
<p>
The Action Applications can run on every computer which runs one of the supported operating
systems. 

There is probably a minimum requirement in terms of processor
speed and amount of memory. If the Action Applications run on a single computer (including
the MySQL database back end), it should be no less than a 200 MHz 
processor and 64 MByte of RAM.

<sect>Software Requirements
<p>
Note: There are instructions for the installation of all software modules
but the operating system in the next chapter: <ref id="install_other"
name="Installation of other packages needed by the Action Applications">
<sect1>Operating System
<p>
The primary supported operating system is GNU/Linux. However, the Action Applications should
run on any unix or unix-like operating system which can run all the other
software components. The Action Applications were developed
and tested on <bf/Red Hat Linux/ 
6.0 and 6.2, so it is recommended to use this OS.
This installation guide has a strong focus on Red Hat Linux.

It is known that Action Applications also run on FreeBSD 2.2.7.

<sect1>Database Server
<p>An SQL database server 
is needed by the Action Applications in order to store all the information. 
The only supported SQL server so far is the <bf/MySQL/ database server. The data
is organized in several tables in the database. Action Applications need one logical database
within the database server. The server can be used for other applications
as well.

The database server does not need to be on the same machine as the other
components are.

Action Applications need at least MySQL version 3.22.32. Older version may work but have not
been tested, and they contain known security holes.

If you want to use a different database server than MySQL,
for example, if you have 
already a database server running, you will have to do some porting work.
Action Applications were written with database back end portability in mind, and as little
as possible MySQL specific functions were used. It is important that there
is PHP support for the database server you want to use.

<sect1>Permission System
<p>
If you want to use LDAP as the permission system,
you should use the <bf/OpenLDAP/ server software. Other LDAP servers should
work, too, but the Action Applications have been tested with OpenLDAP only.

If you have already an OpenLDAP server running, you may skip the rest of
this section.

<label id="ldap_thoughts">
Using LDAP, some thoughts about the LDAP database organization should be
wasted. An LDAP database is an hierarchically 
structured system of objects, each member of one or more certain classes.
Every object in your database has its place in the potentially
global LDAP hierarchy. Each object has a unique name, the so called
<em/distinguished name/, or short <em/dn/. The dn consists of the full "path"
from the global LDAP name space to the object, similar to names in the
domain name system.

In order to set up the LDAP server for Action Applications, you need to figure out some
information you want to use:
<itemize>
<item>Your base dn. This is the common part all your LDAP objects will have
in their dn, describing the "path" from the global LDAP name space to your
organization. It is recommended that you use a domain name you own for 
that. (You could also use a geographical category, but this is not 
described here.) A domain name can be described in a LDAP dn using the
<em/dc/ attribute. For example, the base dn for a possible domain name
<em/ecn.apc.org/ would be <tt/dc=ecn,dc=apc,dc=org/.
<item>Your LDAP administrative account. OpenLDAP's built-in access
control needs a <em/root/ object which has all privileges. Once it exists,
the root object can be used to modify the data stored in the LDAP database.
Like every object in the database, the root object needs a dn. It is 
recommended that you use the canonical name <em/root/. Following the
example above, this gives us a root object dn of 
<tt/cn=root,dc=ecn,dc=apc,dc=org/.
</itemize>

Note: As with the database server,
the OpenLDAP server does not necessarily need to be running on the same
machine as the Action Applications.

If you are <em/not/ using LDAP as the permission system basis, permission
information will be stored within the SQL database.

<sect1>WWW (http) Server
<p>
The Action Applications have been developed and tested with the 
<bf/apache/ http server. Other http servers might work, too, but there are some
things to consider:
<itemize>
<item>The Action Application relay on a feature in the apache http server
which allows to pass GET parameters (query strings) to scripts which are
run from a SSI (server side include) command in a page.
It is known that the
Microsoft Internet Information Server, for example, does not do that.
<item>The apache http server can be configured to load PHP as a 
<em/module/. This speeds things up a lot because the PHP interpreter does
not have to be loaded every time a PHP script runs. Action Applications
work in CGI mode as well, though. 
</itemize>

<sect1>PHP
<p>
Action Applications are written in PHP3. The minimum version to use
should be PHP 3.0.7 but this has not been tested; we know they work with
PHP 3.0.12 and newer up to 3.0.16. PHP4 has not been tested, either.

PHP can be build as a <em/module for the apache http server/ or as a
<em/standalone program/. The first way is preferred for performance
reasons.

Your PHP needs optional modules: 
<itemize>
<item>A module is needed to access your SQL database. For example,
if you are using 
MySQL as the database, you need the MySQL module for PHP.
<item>If you are using LDAP as the permission system, you need the
LDAP module for PHP.
</itemize>

The modules can be 
<itemize>
<item><em/compiled into PHP/ or
<item><em/loaded at run time/.
</itemize>

Both ways are described in the <ref id="php_install" 
name="PHP installation section">.

<sect>Know-How Requirements
<p>
To install the Action Applications, you will need some basic unix skills. You should have
installed programs before and be familiar with administration of your
system.

<sect1>Other Preconditions





<chapt>Installation of Other Packages needed by Action Applications
<label id="install_other">
<sect>Platform
<p>
The installation instructions given here are intended for use with RedHat
Linux. We used version 6.0 and 6.2. This specifically means that the <em/rpm/ 
tool is
used wherever possible. 

<em/If your system does not support the rpm tool/,
most procedures will be quite different from what is shown here. 
You will probably have to do most installations by building the software
itself. It is beyond the scope of this document to describe that although
necessary configurations options will be mentioned.

<sect>MySQL database back end
<p>
Check if you have already MySQL 3.22.32 or newer installed:
<tscreen><code>
% rpm -q MySQL
</code></tscreen>

If it is not installed or if the version used is too old, install
it.
If you don't have a CD with MySQL RPM files, download it from 
<url url="http://www.mysql.com/downloads/mysql.html">. (MySQL is
<em/not/ included in RedHat Linux.) Use the stable
release version. Get files from the "standard binary RPMs" part: 
"<em/Server for ... systems/", "<em/Client programs for ... systems/"
and "<em/Include files and libraries for development for ... systems/".
(The latter is needed re recompile php if this has to be done, see 
below.)

As root, install the RPMs:
<tscreen><code>
# rpm -Uv MySQL-3.22.32-1.i386.rpm
</code></tscreen>
This command will install the MySQL database server, create some administrative
tables and already start the server itself. It also creates a file in
<tt>/etc/rc.d/init.d/</tt> and symbolic links in <tt>/etc/rc.d/rc?.d/</tt>
so the server is started and stopped properly on system start and shutdown.

Also install the MySQL client tools and the development files:
<tscreen><code>
# rpm -Uv MySQL-client-3.22.32-1.i386.rpm
# rpm -Uv MySQL-devel-3.22.32-1.i386.rpm 
</code></tscreen>
Since the server is now running, it can be accessed. It is a good idea to
immediately set a password for the MySQL root user.
Remind the password - better not use <em/mysqlpass/ for obvious reasons.
We will refer to this password as the <em/mysql root password/.
<tscreen><code>
# mysqladmin -u root password 'mysqlpass'
</code></tscreen>

Then create your initial Action Applications database. To do this, you need the file
<tt>aadb.sql</tt> from the Action Applications doc directory. It contains SQL commands
which create the database. When queried for a password, use the
mysql root password.
<tscreen><code>
# mysql -u root -p
Enter password: 
mysql> CREATE DATABASE aadb;
Query OK, 1 row affected (0.03 sec)

mysql> QUIT
Bye
# mysql -u root -p aadb < doc/aadb.sql
Enter Password:
#
</code></tscreen>

Create a user in MySQL that will be able to access the new aadb database. 
Again, you will need to provide a new password; below, it is <em/password2/.
Use a different one and remind it. We will refer to this password as the
<em/aadbuser password/.
<tscreen><code>
# mysql -u root -p
mysql> USE mysql;
mysql> GRANT SELECT,INSERT,UPDATE,DELETE 
ON aadb.* 
TO aadbuser@localhost 
IDENTIFIED BY 'password2';
Query OK, 0 rows affected (0.05 sec)

mysql> FLUSH PRIVILEGES;
mysql> quit
</code></tscreen>

<sect>OpenLDAP
<sect1>Package Installation
<p>
Note: You only need the OpenLDAP server if you decided to use LDAP as
the permission system. The OpenLDAP server does not need to be on the same
host as the Action Applications themselves are.

Check if you have already the OpenLDAP server installed:
<tscreen><code>
% man slapd
No manual entry for slapd
</code></tscreen>
If the manual page appears, it is very likely you have the OpenLDAP server on
the machine. (This check is preferred over the rpm way because the OpenLDAP
rpm exists only for a short time so far and many machines probably have it
installed without the rpm.)

OpenLDAP is included in RedHat Linux 6.1; releases prior to 6.1 don't have
it. It is possible to install the rpms on any 6.x RedHat Linux though.

If you don't have the OpenLDAP server installed, and if you don't have
the rpm's, get the rpm's from a 
RedHat mirror site, for example from
<url url="ftp://ftp.tu-chemnitz.de/pub/linux/redhat-updates/6.2/i386/openldap-1.2.9-6.i386.rpm">
and
<url url="ftp://ftp.tu-chemnitz.de/pub/linux/redhat-updates/6.2/i386/openldap-devel-1.2.9-6.i386.rpm">
and install them:
<tscreen><code>
# rpm -Uv openldap-1.2.9-6.i386.rpm
openldap-1.2.9-6
# rpm -Uv openldap-devel-1.2.9-6.i386.rpm                
openldap-devel-1.2.9-6
</code></tscreen>

<sect1>Setup: Configuration
<p>
If you didn't have an OpenLDAP server running, you will need to create the
<tt>/etc/openldap/slapd.conf</tt> file - this is the server configuration file.
Use the file <tt>doc/slapd.conf</tt> from the Action Applications distribution to create it.
This file is well documented and contains hints about which spots need
to be modified. <em/The LDAP server will not work properly if you don't edit
this file./ You will need some basic data to fill in here; see at
<ref id="ldap_thoughts" name="LDAP basic info"> for details.

The root dn password in this file can be trivial for now (leave it as it is,
"password"), we will replace it
shortly with a secure one. We refer to this password as the 
<em/ldap root dn/ password.

Also you need to copy some other files from the Action Applications doc directory to the 
<tt>/etc/openldap/</tt> directory and change the file mode of the main
configuration file:
<tscreen><code>
# chmod 600 /etc/openldap/slapd.conf 
# cp slapd.oc.netscape.conf slapd.at.netscape.conf slapd.oc.apc.conf slapd.at.apc.conf /etc/openldap/
</code></tscreen>

Edit the file <tt>/etc/openldap/ldap.conf</tt>. After installation, it
only contains comments. Put in two lines containing your base dn and
the host where the ldap server runs:
<tscreen><code>
BASE	dc=ecn,dc=apc,dc=org
HOST	localhost
</code></tscreen>
(This file is used by the programs that <em/access/ a ldap server, not
by the server itself. It only affects accessing programs on the machine
where the programs run.)

Create the directory where the LDAP database will live
(again, replace the domain name with the one your base dn was
derived from):
<tscreen><code>
# mkdir /var/lib/ldap/ecn.apc.org
</code></tscreen>

<!--
<sect1>Setup logging
<p>
It is recommended to set up a separate log file for the OpenLDAP server
log file. Edit <tt>/etc/syslog.conf</tt> and put in this line:
<tscreen><code>
local4.*				/var/log/openldap
-->

<sect1>Start the ldap server
<p>
Try to start the ldap server and check messages from the messages
logfile (normally <tt>/var/log/messages</tt>):
<tscreen><code>
# /etc/rc.d/init.d/ldap start
Starting ldap:                                             [  OK  ]
# tail /var/log/messages
[...]
Jul 17 11:01:28 ecn ldap: slapd startup succeeded
</code></tscreen>

Make the ldap server start on system boots:
<tscreen><code>
# chkconfig ldap on
</code></tscreen>

<sect1>Initial database creation
<p>
The OpenLDAP server needs an initial database before its first start. To
create this database, you need a <em/ldif/ format file which can be translated
into the database by the ldapmodify command. There is an example ldif file,
namely <tt/LDIF.ini/, in the doc/ directory. Edit this file to suit your
needs according to the following instructions.

The initial ldif file should contain five objects:
<itemize>
<item>Your base object
<item>The Action Applications account object (used by Action Applications to access the ldap server)
<item>A group object for Action Applications administrators (superadmins)
<item>One initial superadmin account object which is the initial member 
	of the group of superadmins
<item>The Action Applications APCACL object (Action Applications access control storage object)
of Action Applications administrators
</itemize>
Objects are separated by blank lines. Each line consists of a keyword,
followed by a colon, followed by a value. The first line of each object
is the dn, thus the keyword is "dn". The other object lines are its
attributes.

Edit these spots:
<itemize>
<item>Everywhere: replace
	all occurances of the
	example "dc=ecn,dc=apc,dc=org" base dn with your own one
	(hopefully your
	editor has a good search and replace function).
<item>root object (first block)
	<descrip>
	<tag/o: Econnect/ Replace "Econnect" with your organization name.
	<tag/dc: ecn/ Replace "ecn" with your base dn domain name, but only the
	first word up to but not including the first dot.
	<tag/description/ Fill in a descriptive text describing your
		organization.
	</descrip>
<item>Action Applications account object (second block)
<p>
No modifications
<item>Action Applications administrator (superadmin) group object (third block)
	<descrip>
	<tag/member/ Fill in the dn of the personal initial member object
		(see below)
	</descrip>
<item>Initial superadmin account object (forth block)
	<descrip>
	<tag/dn/ Replace "uid=karel" with "uid=XXX" where XXX is a user id
		for the initial administrator group member
		(for example, use qour first name).
	<tag/cn/ Fill in the canonical name of the initial member.
	<tag/sn/ Fill in the surname of the initial member.
	<tag/uid/ Repeat the user id from above.
	<tag/mail/ Fill in an email address of the initial member.
	</descrip>
<item>The APCACL object (Action Applications access control storage) (fifth block)
	For this object you need to invent a unique identifier. The 
	identifier should consist of 32 characters only containing
	characters from the set <em/0123456789abcdef/. This is your
	<em/aa id/. You will need it later again.
	<descrip>
	<tag/dn/ Replace the string after "apcobjectid=" up to the next
		comma with your aa id.
	<tag/apcobjectid/ Replace the content with your aa id.
	<tag/description/ Put in "Action Applications at ..." where ... is your organization.
	</descrip>
</itemize>

Having made these modifications, we can tell the ldap server to create
the objects:

<tscreen><code>
% ldapmodify -a -f ldiffile -D "cn=root,dc=ecn,dc=apc,dc=org" -w password
adding new entry dc=ecn,dc=apc,dc=org

adding new entry cn=aalduser,dc=ecn,dc=apc,dc=org

adding new entry cn=Action Applications Admins,dc=ecn,dc=apc,dc=org

adding new entry uid=moritz,dc=ecn,dc=apc,dc=org

adding new entry apcobjectid=000111222333444555666777888999Action Applications,dc=ecn,dc=apc,dc=org
</code></tscreen>


If the server responds with an error message:
<descrip>
	<tag/ldap_add: Insufficient access/ Check the rootdn: entry in
	the slapd.conf file and what you typed after the -D switch
	to ldapmodify. They must match.
	<tag/ldap_add: Object class violation/ The objects in the ldif
	file are not consistent. Check if you accidently deleted lines
	from the file.
</descrip>

In order to check the server, search all the objects you just added. The 
result should be similar to the ldif file you just used.
<tscreen><code>
% ldapsearch -L objectclass=\*
</code></tscreen>
If you get an error message or nothing, check the 
<tt>/etc/openldap/ldap.conf</tt> file for the BASE and HOST entries.

<sect1>LDAP passwords
<p>
There are no less than three passwords we must maintain for the ldap
server. We refer to them as the <em/root dn password/, which is used
to access the LDAP root account; the 
<em/initial superadmin account password/, which is used to access the
initial Action Applications superadmin account; and the 
<em/aalduser account password/, which the Action Applications use to 
access the aalduser account and the LDAP server.

We should now set the root dn password in 
<tt>/etc/openldap/slapd.conf</tt> as well as for the initial
superadmin
account password. To do this, first set the initial superadmin
account password
using ldappasswd, then make a query to the ldap server so we get an 
encrypted version of the password back, and 
copy and paste the encrypted password into the sldap.conf file.
When you issue the following commands, the password given after the -w 
switches must match the <em/old/ root dn password which is still defined
in clear text in <tt>/etc/openldap/slapd.conf</tt>. When prompted for the
new password, enter the new root dn password you want to set. And remind it!
<tscreen><code>
% ldappasswd -D "cn=root,dc=ecn,dc=apc,dc=org" -w password -t "uid=moritz,dc=ecn,dc=apc,dc=org" -H ssha
New password: 
Re-enter new password: 
% ldapsearch -D "cn=root,dc=ecn,dc=apc,dc=org" -w password -L uid=moritz
dn: uid=moritz,dc=ecn,dc=apc,dc=org
objectclass: top
objectclass: person
objectclass: organizationalperson
objectclass: inetorgperson
cn: Moritz Both
sn: Both
uid: moritz
mail: moritz@aldebaran.de
userpassword: {ssha}1KoDEQd/MrY+JPnFgotki5AZrCyfGZYr
</code></tscreen>

If everything worked right, you get the line "userpassword" as shown.
This is the encrypted version of the new root dn password you entered.
Paste this string (including the "{ssha}") into the rootpw: line in
<tt>/etc/openldap/slapd.conf</tt>. 
After the next server restart, the old root dn password "password" 
will no longer work,
instead, you use the password you just entered.

If you want, you can change the password for the initial superadmin account 
again
so it is different from the root dn password.

Try to access the ldap server using your initial superadmin account:
<tscreen><code>
% ldapsearch -D "uid=moritz,dc=ecn,dc=apc,dc=org" -W -L objectclass=\*
Enter LDAP Password: 
</code></tscreen>
You should get all the objects that are stored. In case of an error message,
check the spelling of the command line... errors most likely have to do with
spelling errors.

<bf/Finally/, set a aalduser account password.
<tscreen><code>
% ldappasswd -D "cn=root,dc=ecn,dc=apc,dc=org" -t "cn=aalduser,dc=ecn,dc=apc,dc=org" -H ssha -W
</code></tscreen>


<sect>Installing the Apache Web Server
<p>
Use the RPM that comes from RedHat. We have had success with the versions
1.3.9 and 1.3.12. You need to install the "devel" packages, too.

To find out which version of apache httpd you have, use:
<tscreen><code>
% httpd -v
Server version: Apache/1.3.9 (Unix)  (Red Hat/Linux)
Server built:   Apr  7 1999 17:17:41
</code></tscreen>

To install the apache web server, use these commands. Not that in this 
example, the apache itself was already installed, but the development
package was missing (this is the default case for RedHat Linux).
<tscreen><code>
# rpm -Uv /mnt/cdrom/RedHat/RPMS/apache-1.3.9-7.i386.rpm 
package apache-1.3.9-7 is already installed
# rpm -Uv /mnt/cdrom/RedHat/RPMS/apache-devel-1.3.9-7.i386.rpm 
apache-devel-1.3.9-7
</code></tscreen>

Configuring the web server is a task for a later point in time because
RPM will do part of this work.

<sect>PHP3<label id="php_install">
<sect1>PHP3 installation
<p>
Hint: The use of PHP4 has not yet been tested.

php3 runs within the apache web server as a module. We need a version of
php3 which includes support for <em/two optional php modules/, namely ldap
and mysql. These modules provide access to ldap and mysql databases,
respectively, from php3 programs. 
(If you don't use ldap with the Action Applications, you will not need the
ldap php support.)

There are many ways to install all this, and many can generate a lot of
trouble. The cleanest and easiest way is, again, to use RPMs.

<sect1>Testing php3 installation
<p>
First, create a test WWW page to find out the status of php3 support on
your system. This can be done easily by executing this command (assuming
<tt>/home/httpd/heml</tt> is your DocumentRoot directory:
<tscreen><code>
echo "<?php phpinfo() ?>" > /home/httpd/html/test.php3
</code></tscreen>
Access the page with a web browser (http://localhost/test.php3). 
<itemize>
<item>If you see the string <tt/<?php phpinfo() ?>/, you do not have
php3 installed or at least it is not enabled.
<item>If you see a page beginning with <tt/PHP Version/, you have a working
php. Browse through the <tt/Extensions/ section. Look for an extension
named <tt/MySQL/ and, if you are using the LDAP permission system, for one
named <tt/LDAP/. If both are there, you are lucky because the php setup
id complete; otherwise, you must install the missing parts.
</itemize>

<sect1>Installing PHP
<p>
Unfortunately, as of this writing, there is no mysql support for php which
comes as an rpm made by RedHat. There are some mysql modules for php on
the RedHat server, but they are all for older versions of php.

RedHat 6.1 and 6.2 above have a php rpm which is prepared for inclusion of 
other php
modules. The ldap module is provided. The mysql module is not provided,
but it is possible to build the mysql module. The advantage of going this
way is that you will have the RPMs which are easy to install on all your
machines and that the RPM install scripts will manage necessary configuration
file changes by themselves.  The disadvantage is that the RPM build process
requires some more packages installed. This is described in the
next section.

If you don't want to use RPMs, you must build PHP the traditional
way. This is described in the sections following the next section.

<sect1>Building the PHP RPMs including mysql
<p>
<enum>
<item> To build the PHP RPMs including the mysql support, 
you need the following
packages installed which you find at www.redhat.com:
	<itemize>
	<item>apache-devel
	<item>imap-devel
	<item>openldap-devel
	<item>postgresql-devel
	<item>MySQL-devel
	<item>apache-devel (version 1.3.9 or newer)
	<item>and there must be a general development environment.
	</itemize>
<item> In order to build RPMs, you need an RPM build environment.
For a quick setup of this, use the following commands:
<tscreen><code>
% mkdir ~/rpmbuild ~/rpmbuild/RPMS ~/rpmbuild/SRPMS ~/rpmbuild/BUILD ~/rpmbuild/SOURCES ~/rpmbuild/SPECS; echo "%_topdir ${HOME}/rpmbuild" >~/.rpmmacros
</code></tscreen>

<item> You need the php source RPM from RedHat and install it (do not install
it before you have the RPM build environment):
<tscreen><code>
% rpm -Uv php-3.0.15-2.src.rpm
</code></tscreen>
In this example, the php source rpm version 3.0.15-2 was used.

<item>Edit the file <tt>~/rpmbuild/SPECS/php.spec</tt>. This file is
the description used by rpm to build the php packages, and the mysql
section is commented out (this is the reason for the fact that there is
no mysql module for php on the RedHat server). You need to uncomment all
lines which concern mysql, and you need to add a section describing the
mysql package. There is a patch which does the right thing for the
version 3.0.15-2; the patch can be found in the Action Applications doc directory as
<tt/php-spec.patch/. To apply this patch, copy it to the
<tt>~/rpmbuild/SPECS</tt> directory and use this command:
<tscreen><code>
% cd ~/rpmbuild/SPECS; patch < php-spec.patch
</code></tscreen>

<item>Run the rpm build process:
<tscreen><code>
% rpm -ba ~/rpmbuild/SPECS/php.spec
</code></tscreen>
This will take some time. After everything is done, you will find all the
RPMs in the directory <tt>~/rpmbuild/RPMS/i386/</tt>. 

</enum>

If you had already
php installed, better uninstall it before you install the new versions.
<tscreen><code>
# rpm --erase --nodeps php php-manual php-mysql php-ldap php-pgsql php-imap
# rpm -iv php-3.0.15-2.i386.rpm php-manual-3.0.15-2.i386.rpm php-mysql-3.0.15-2.i386.rpm php-ldap-3.0.15-2.i386.rpm 
php-3.0.15-2
php-manual-3.0.15-2
php-mysql-3.0.15-2
php-ldap-3.0.15-2
</code></tscreen>

On installation, RPM will edit the apache web server configurations file
(<tt>/etc/httpd/conf/httpd.conf</tt>) and php initialization file
(<tt>/etc/httpd/php.ini</tt>) automatically.

<sect1>Building PHP3 without RPMs
<p>
If you don't want to use RPM for PHP3 installation, you can as well build
it from the scratch. If you want to do this, you will need
<itemize>
<item>The PHP3 sources themselves. get them from 
<url url="http://www.php.net/downloads.php">.
<item>The apache development files installed (apache-devel)
<item>The mysql development files installed (MySQL-devel)
<item>The openldap development files installed (openldap-devel) if you plan
to use LDAP as the permission system.
</itemize>

Unpack the PHP3 distribution, change into that directory, configure and
build. This example shows a build <em/with/ the LDAP module; remove the
<tt/--with-ldap/ if you don't use LDAP:
<tscreen><code>
% tar xvfz php-3.0.16.tar.gz
% cd php-3.0.16
% ./configure -with-mysql=yes --with-apxs=/usr/sbin/apxs --enable-track-vars --enable-safe-mode --with-xml --with-ldap --with-config-file-path=/etc/httpd
% make
# make install
/usr/sbin/apxs -i -a -n php3 libphp3.so
cp libphp3.so /usr/lib/apache/libphp3.so
chmod 755 /usr/lib/apache/libphp3.so
[activating module `php3' in /etc/httpd/conf/httpd.conf]
</code></tscreen>

<sect>Configuring the apache web server
<p>
During the PHP3 installation using RPMs, most of the configuration
work for the web server is already done. If you didn't use RPM to install
PHP3, you might have to do the following steps. (It does no harm to
double check if everything is configured correctly anyway.)

The configuration for the apache takes place in the file
<tt>/etc/httpd/conf/httpd.conf</tt>.

You will need the statement <tt>Options +Includes</tt> there. This 
enables the so-called <em/server side includes/ (SSI) which are used by the
page the users read (which contain the actual content). <bf>This can be
a security problem</bf> because whoever can edit these pages can run
any command on your web server. 
(<em/IncludesNOEXEC/ is not enough.)
You might want to consider to enable this only for the directories where it
is needed with <em>&lt;Directory&gt;</em> statements. See also the chapter
on <ref id="security">.

In <tt>/etc/httpd/conf/httpd.conf</tt>, make sure these lines
are not commented out:
<tscreen><code>
AddType application/x-httpd-php3 .php3
</code></tscreen>
and
<tscreen><code>
AddType text/html .shtml
AddHandler server-parsed .shtml
</code></tscreen>
"Commented out" means That they are prepended by a "#". Remove the leading 
"#" from the lines if it is there.

Add <tt/index.php3/ to the tt/DirectoryIndex/ line:
<tscreen><code>
DirectoryIndex index.html index.shtml index.cgi index.php3
</code></tscreen>

Restart the web server to reread the configuration files:
<tscreen><code>
# /etc/rc.d/init.d/httpd restart
</code></tscreen>

After these configuration steps, PHP should work. You can test this by
browsing to your test page (<url url="http://localhost/test.php3">) again.

<sect>PHPLIB installation
<p>
Get PHPLIB from <url url="http://phplib.netuse.de/download/index.php3">.
Unpack it, create a directory <tt>/home/httpd/phplib</tt> and extract the 
files from phplib's php directory to the new directory:
<tscreen><code>
% tar xvfz phplib-7.2b.tar.gz
% su
Password:
# mkdir /home/httpd/phplib
# cp phplib-7.2b/php/* /home/httpd/phplib/
</code></tscreen>

You must add this directory to the line <tt>include_path</tt> in the
<tt>/etc/httpd/php.ini</tt> file. Edit that file so the line looks like
this:
<tscreen><code>
include_path    =  /home/httpd/phplib                 ; UNIX: "/path1:/path2"  Windows: "\path1;\path2"
</code></tscreen>
(The stuff beginning with the ";" is a comment.)


<chapt>Installation of Action Applications
<sect>Installation
<p>
Create a directory <tt/aa/ in your 
httpdocs directory and copy most files from the Action Applications distribution there:
<tscreen><code>
# mkdir /home/httpd/html/aa
# cd apc-aa-1.1.0
# cp -R *.css *.php3 admin images include /home/httpd/html/aa
</code></tscreen>


Edit <tt>/home/httpd/html/aa/include/config.php3</tt>. 
This is the main Action Applications configuration
file. It contains comments which explain everything there.
Note that this file may not contain anything before the <tt/&lt;?php/ line
at the top and after the <tt/?&gt;/ line at the bottom.

<bf>The file <tt>/home/httpd/html/aa/include/config.php3</tt> now contains
passwords. It should therefore not be world readable. On the other hand,
the http server must be able to read it. Read the chapter on
<ref id="security"> for a possible solution for this problem.</bf>

Point your Web browser to 
<url url="http://localhost/aa/admin/sliceadd.php3">. You should see the
login page.

There is just one question open: What is login name and password of the 
initial superadmin account (which you need to create the first slice)? 
The answer depends on the permission system 
you use.

<itemize>
<item>If you are using the LDAP based permission system, the superadmin 
account is the one you created when you edited the initial LDIF data file.
At that time, you have also set a password for this account.
<item>If you are using the sql based permission system, there is no
initial superadmin account so far. To create one, follow the instructions
below.
</itemize>

<sect>Creating a superadmin account
<p>
Action Applications users who have the superadmin privilege may create new
slices in addition to the rights any slice administrator has.

Creating a superadmin account will be necessary whenever you don't have
one left.
This is the case at installation time if you are using the
sql based permission system, and in case you have accidently deleted
the last superadmin account or accidently revoked the superadmin 
privilege from the last superadmin account.
To create a superadmin account, follow these steps.
<itemize>
<item>copy the file doc/doit.php3 to the include/ directory of the Action Applications.
<item>edit config.php3 and insert two lines right behind the 
<tt/&lt;?php/ line at the top. Replace the quoted words with your own 
choice of superadmin account name and password:
<tscreen><code>
define (ADMIN_USER, "administrator");
define (ADMIN_PASS, "password");
</code></tscreen>
<item>Point your web browser to 
<url url="http://localhost/aa/include/doit.php3">.
The superadmin account is created in this step.
<item><bf>Delete the <tt/doit.php3/ file from the include/ directory and
remove the lines you added from <tt/config.php3/!</bf>
</itemize>
You should be able to log in now. Try the page to add a slice 
<url url="http://localhost/aa/admin/sliceadd.php3">. Log in with your
(new) superadmin account and read on in the next section to see how to
start.

<sect>Your first test slice
<sect1>Creating the first test slice
<p>
After a successful login on <url url="http://localhost/aa/admin/sliceadd.php3">,
you should see the <em/Slice Administration - Add Slice/ page. Choose the
slice type (see <ref id="slices"> for details) and say <em/Add/.

Fill in the form. The fields shown here depend on the slice type, but some
fields are there for every slice type. Especially fill in the following 
fields:
<itemize>
<item>Headline - a title for the slice
<item>Short name - a short description of the slices contents
<item>Slice URL - the URL of a WWW page where you want to display the
	actual content; this is the place readers will access. The page
	does not need to exist at this time and it does not need to be
	within the action application directory tree
<item>Listing length - say 10
<item>Fulltext info abstract grab length - say 200.
</itemize>
You may fill in the other fields, too.
After
selecting 
<em/insert/ at the page bottom the slice will be created.

Each slice can have a set of categories. New information items can belong
to one or more categories. Create your first category by selecting 
<em/New/. Enter the category name and hit OK. 

At this point in time, you have created a new slice and thus, a new
action application. 

<sect1>Adding the first information item to the test slice
<p>
Select <em/Add Article/. Fill in some information. Make sure to set the
Expire date to a day in the future and hit <em/insert/.

The page you see after that tells you the HTML code which you must place
into the page which is meant to display the content (the slice URL).

You might have got an idea how everything works now?







<chapt>Customization
<sect>Language Customization
<sect1>How it works<label id="cust_lang_how">
<p>
Action Applications were designed with internationalization in mind. There
are currently two languages shipping: English and Czech.

The language configuration is done with statements in the file
<tt/config.php3/ which point to other files which contain language
information. 

Each language has an abbreviation used in the Action Application 
configuration. The abbreviation for English is <em/em/, Czech is
<em/cz/.

The language information is split up in parts:
<itemize>
<item>Common language information in the file 
<tt>include/??_common_lang.php3</tt>. This is used for non
application specific language information, for example, for the login
box.
<item>Application specific language information. Each Action Application
has its own specific language information in the files
<tt>include/??_*_lang.php3</tt> where * is replaced with an
Application dependent abbreviation; for example, the <em/News Listing/
Action Application's language information lives in the file
<tt>include/??_nefs_lang.php3</tt>.
</itemize>
Of course the file names do not contain question marks; instead, the
<em/??/ is replaced by the actual language abbreviation. For example, the
Czech common language file is named <tt>include/cz_common_lang.php3</tt>.

In <tt>include/config.php3</tt>, the <em/common/ language files are
referenced by a <em/require/ statement. The section containing it
looks like this:
<tscreen><code>
# Language: uncomment one language file
require ($AA_INC_PATH . "en_common_lang.php3");  # English
# require ($AA_INC_PATH . "cz_common_lang.php3");  # Czech
</code></tscreen>
Exactly one common language file must be uncommented here. (Again,
the <em/#/ character at the beginning of the line makes it a comment.)
This means that for the common part, one installation of the Action
Applications (using one config.php3 file) can only use one language
for the common parts.

The application specific language files are referenced by assignment
statements. The relevant section looks like this:
<tscreen><code>
# index names must be less than 20 characters (as is en_news)
$ActionAppConfig[en_news][name] = "News";
$ActionAppConfig[en_news][file] = "en_news_lang.php3";
# $ActionAppConfig[news][file] = "cz_language.php3";    # Czech language news

$ActionAppConfig[en_action_alerts][name] = "Action alerts";
$ActionAppConfig[en_action_alerts][file] = "en_news_lang.php3";

$ActionAppConfig[en_events][name] = "Events listings";
$ActionAppConfig[en_events][file] = "en_news_lang.php3";

$ActionAppConfig[en_press_rel][name] = "Press release publisher";
$ActionAppConfig[en_press_rel][file] = "en_press_lang.php3";

$ActionAppConfig[en_jobs][name] = "Job listing";
$ActionAppConfig[en_jobs][file] = "en_news_lang.php3";

$ActionAppConfig[en_addresses][name] = "Address list";
$ActionAppConfig[en_addresses][file] = "en_news_lang.php3";

$ActionAppConfig[en_media_mon][name] = "Media monitoring";
$ActionAppConfig[en_media_mon][file] = "en_news_lang.php3";
</code></tscreen>
As you can see, each Action Application has one line with a description
of the application and one line with a file name containing the application
specific language information. It is possible to keep the same 
Action Application with more than one different languages.

<sect1>Customizing an Action Application to a new language
<p>
These are the steps you will have to perform if you want to set up an
Action Application in a different language than the default, English:
<itemize>
<item>Figure out the language abbreviation for your new language. Check if
there are already files for this language in the <tt>include/</tt>
directory. If not, make the abbreviation up. In the rest of these
instructions, the example language abbreviation <em/lg/ will be used.
<item>If you want the common non application specific parts of the
Action Applications to be in that language, too, check if there is a file 
<tt>include/lg_common_lang.php3</tt> for your language. If not, copy the
English version <tt>include/en_common_lang.php3</tt> to 
<tt>include/lg_common_lang.php3</tt>. Translate the English to your
language. Then, edit <tt>include/config.php3</tt>, comment out the line
for the English file and put in yours:
<tscreen><code>
# Language: uncomment one language file
# require ($AA_INC_PATH . "en_common_lang.php3");  # English
# require ($AA_INC_PATH . "cz_common_lang.php3");  # Czech
require ($AA_INC_PATH . "lg_common_lang.php3");
</code></tscreen>
<item>Find the application specific file for the Action Application you want
to translate in the <tt>include/</tt> directory. Copy it the same way,
replacing the <em/en/ with your <em/lg/ and edit it as above.
<item>Add another block to <tt>config.php3</tt> where the application
specific language information lives. For example, for a new news listing
application in your language <em/lg/ add these lines:
<tscreen><code>
$ActionAppConfig[lg_news][name] = "Njuigkeiten";
$ActionAppConfig[lg_news][file] = "lg_news_lang.php3";
</code></tscreen>
Beware that the <em/en/ is replaced with <em/lg/ at <bf/three/ spots.
This example assumes that <em/News/ is translated <em/Njuigkeiten/ in your
new language.

Note: You do not need to remove the English version of News Listing!

Note: If you want the pages for this Action Application be displayed with
a different character set than the default, change the HTML_PAGE_BEGIN
setting.
</itemize>

After this procedure, the new lg language Action Application will show up
in the pull down box on the <em/add slice/ page.

<sect>Creating new Action Applications
<sect1>Overview
<p>
If you are not satisfied with the collection of Action Applications and want
to set up your own flavor, you can create your own Action Application.

Creating a new Action Application is very similar to customizing for a new
language. Fist read the section <ref id="cust_lang_how"
name="Customization, Language, How it works">.

In order to create a new Action Application, follow these steps:
<itemize>
<item>Figure out an abbreviation for your new application such as
<em/news/, <em/events/ etc. This should be less than 15 characters and
only contain letters and underscores (_). For this example, we assume
your new Action Application will have the abbreviation <em/pizza/ because
you are about to create a pizza place listing.
<item>Copy a template language file, for example,
<tt>include/en_news_lang.php3</tt>, to a new name. The new name should
contain your new abbreviation instead of the <tt/news/. Thus, in our
example, it is called <tt>include/en_pizza_lang.php3</tt>.
<item>Edit the new file to create the new Action Application, replacing
the old information there with your new one. See next section for
details.
<item>Add the new application to the <tt>include/config.php3</tt> file,
just as if you would add a new language.
</itemize>

<sect1>Editing the language file to create a new Action Application
<p>
There are comments within
the file which will help you. However, some basic information
will help you there.

<itemize>
<item>You will find text displayed on the application's pages here
as well as default settings for several aspects of the application,
database fields and their use and existence within the application
and so on.
<item>It will probably help if you look at more than one 
application from the distribution; you will see that by editing
the file the right way, you can create way different things.
<item>If you need fields for your new application for which there are no
fields in the database table, just reuse a field which you do not need.
All field mapping is specified in language files (so there is no table
in database for that). Lets look in en_news_lang.php3 file, where
English version of News AA is defined. There is "Input form field
names" section:
<tscreen><code>
   # Input form field names
   define("L_HEADLINE", "Headline");
   define("L_ABSTRACT", "Summary");
   define("L_FULL_TEXT", "News");
   define("L_FT_FORMATTING", "Formatting");
   define("L_FT_FORMATTING_HTML", "HTML code");
   define("L_FT_FORMATTING_PLAIN", "Plain text");
   define("L_POSTDATE", "Post date");
   define("L_POSTED_BY", "Author");
   define("L_E_POSTED_BY","Author's e-mail");
   define("L_PUBLISH_DATE", "Publish date");
   define("L_EXPIRY_DATE", "Expiry date");
   define("L_CATEGORY", "Category");
   define("L_STATUS_CODE", "News status");
   define("L_LANGUAGE_CODE", "Language");
   define("L_CP_CODE", "Encoding");
   define("L_LINK_ONLY", "External news");
   define("L_HL_HREF", "External news URL");
   define("L_HTML_FORMATTED", "HTML formatted");
   define("L_HIGHLIGHT", "Highlight");
   define("L_IMG_SRC","Image URL");
   define("L_IMG_WIDTH","Image width");
   define("L_IMG_HEIGHT","Image height");
   define("L_PLACE","Locality");
   define("L_SOURCE","Source ");
   define("L_SOURCE_HREF","Source URL");
   define("L_CREATED_BY","Written by");
   define("L_LASTEDIT","Last edited by");
   define("L_AT","at");
   define("L_EDIT_NOTE","Editor's note");
   define("L_IMG_UPLOAD","Image upload");
</code></tscreen>
   In this section you can set how the names of fields in item table are
   displayed to the user in this Action Application. 

In other words, database fields are not renamed; only the user sees
a different name for the field. From the perspective of the Action
Applications, the fields are not different.

<item>If you really need more fields than there are in the database for the
items (the table <em/items/ contains them), you will have to tweak the
program a bit more. Read this developer note to get the picture.
This process is not covered any further by this document at this point
in time.
<tscreen><verb>
   May be, there are some fields, we have to add to the items table. I
   think, we can call it like foo ... - the fields can be then used
   specifically to each AA. When we talking about contact information,
   there are three fields contact1, contact2 and contact3 in items table
   - they are not used yet, but I think, we should remove it (or rename
   to foo1, foo2 ... - see above). The idea of holding it here is not
   good, because of limit three contacts (see AAdb E-R diagram). I prefer
   to create new table contact and connect it to items table via items.id
   (foreign key).

   Here some comments I posted before via e-mail:

   From my point of view I prefer using existing fields in item table,
   if it is possible. I know, there is no field for long binary data, so
   I agree with creating of new such field in item table. It will be
   useful to add Long_binary_type column, which keep the type of data
   are there stored. On the other hand, if there are more than these
   columns, which you want to add to item table, I prefer to create the
   new table with additional informations for your action application and
   link it in optional 1:1 relation to item table. I don't want to expand
   item table to infinity as far as the number of new applications will
   increase.

   The possible solution can be to create new constant (in language file
   - see below) which then will be added to SQL commands used in toolkit
   script. Example: define(AA_SPECIFIC_ITEM_TABLE_JOIN, ",radio LEFT JOIN
   ON items.id = radio.item_id") and then use: $SQL= "SELECT FROM items
   ". AA_SPECIFIC_ITEM_TABLE_JOIN ." WHERE ....";

   If you find better solution, you are welcome, of course.

   I know, it's look funny to have one table for all application, but
   there are two reasons for that: 1) You can exchange (feed) items from
   one application to another one (the new application can be done very
   easy - by modifying language file - so I think, there could be quite a
   lot of very similar applications - the data exchange between them make
   sense). 2) You can very easy search in database for some keyword and
   you find it in all applications.

   I think, the current set of fields is sufficient for most applications
   - job listing, grant database, news, action alerts, press release ...
   All these applications use title, summary, Fulltext, some kind of source
   ... Maybe it is not enough for Amarc, but if you will not use images
   in Amarc, you can use image fields for that (source, width, height).
   (It looks like mixing apples with plums, but all this fields belongs
   to multimedia data so it is not so bad.)

   The reason why we use no boolean fields is database independence.
   Jirka made an database research and his proposal is to use numeric
   field instead of boolean.
</verb></tscreen>
</itemize>


<chapt>Security Issues<label id="security">
<sect>Server Side Includes
<p>
The directories which contain the user pages must be enabled for
SSI (server side includes). This is a major security hole if untrusted
people can alter pages in these directories. Only enable SSI for 
directories where it is needed. You can put the statement which enables
it into per directory directives in the apache http server configuration
file, for example, like this (snipped from <tt>/etc/httpd/conf/httpd.conf</tt>:
<tscreen><code>
&lt;Directory /home/httpd/html/aa/user-x/&gt;
Options +Includes
&lt;/Directory&gt;
</code></tscreen>
This also suggests to put all Action Application user pages into a common
directory structure and not into the normal user's htdocs tree, so 
control over the pages can easily be separated.
<sect>config.php3 permissions
<p>
The http server must be able to access the
<tt>include/config.php3</tt> file, but this file contains passwords, so it
should not be world readable.

One possible common solution for this is that you create a unix group 
for your http server and make the <tt/config.php3/ file belong to that
group and be group readable. The steps to do this would be:
	<itemize>
	<item>Create unix group, for example, <em/www/. On RedHat Linux,
	this can be done like this:
	<tscreen><code>
# groupadd -r www
	</code></tscreen>
	<item>Edit <tt>/etc/httpd/conf/httpd.conf</tt> and alter the line
	<tscreen><code>
Group nobody
	</code></tscreen>
	to
	<tscreen><code>
Group www
	</code></tscreen>
	<item>Change file permissions in <tt/config.php3/ and restart
	the server.
	<tscreen><code>
# chown root.www /home/httpd/html/aa/include/config.php3 
# chmod 640  /home/httpd/html/aa/include/config.php3
# /etc/rc.d/init.d/httpd stop
# /etc/rc.d/init.d/httpd start
	</code></tscreen>
	</itemize>

<chapt>Maintenance
<p>
There is no maintenance to do, except that you must watch out always to
have enough disk space for all the data.

<chapt>Contacting the Developers
<p>
The Action Applications were developed by the 
<em/Association for Progressive Communications/, <url 
url="http://www.apc.org/">. They are released as open source and there is
set up a project at SourceForge. The Action Applications SourceForge
page can be found at <url url="http://sourceforge.net/projects/apc-aa/">.

If Sourceforge is unavailable, email ... for further information.

</report>
