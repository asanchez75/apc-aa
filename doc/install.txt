  Installation of APC Action Applications
  Moritz Both, mb@aldebaran.de
  2000/09/12, v0.10

  "Big picture" description of the installation process of the APC
  Action Applications
  ______________________________________________________________________

  Table of Contents

























































   Introduction

  1. Overview

  2. Slices

  3. Users, Roles and Permissions

  4. Action Applications Software Components

  5. Conventions used in this document

  5. Requirements / Preconditions / Suggested Environment

  6. Hardware Requirements

  7. Software Requirements

     7.1 Operating System
     7.2 Database Server
     7.3 Permission System
     7.4 WWW (http) Server
     7.5 PHP

  8. Know-How Requirements

     8.1 Other Preconditions
     8.1 Installation of Other Packages needed by Action Applications

  9. Platform

  10. MySQL database back end

  11. OpenLDAP

     11.1 Package Installation
     11.2 Setup: Configuration
     11.3 Start the ldap server
     11.4 Initial database creation
     11.5 LDAP passwords

  12. Installing the Apache Web Server

  13. PHP3

     13.1 PHP3 installation
     13.2 Testing php3 installation
     13.3 Installing PHP
     13.4 Building the PHP RPMs including mysql
     13.5 Building PHP3 without RPMs

  14. Configuring the apache web server

  15. PHPLIB installation

  15. Installation of Action Applications

  16. Installation

  17. Creating a superadmin account

  18. Your first test slice

     18.1 Creating the first test slice
     18.2 Adding the first information item to the test slice
     18.2 Customization
  19. Language Customization

     19.1 How it works
     19.2 Customizing an Action Application to a new language

  20. Creating new Action Applications

     20.1 Overview
     20.2 Editing the language file to create a new Action Application
     20.2 Security Issues

  21. Server Side Includes

  22. config.php3 permissions

  22. Maintenance

  22. Contacting the Developers



  ______________________________________________________________________












































  1.1...  I.In.nt.tr.ro.od.du.uc.ct.ti.io.on.n

  1.1...1.1...  O.Ov.ve.er.rv.vi.ie.ew.w

  The APC Action Applications provide easy automated publishing for non-
  profit WWW sites and 'Usenet-like' sharing of articles between sites.

  Action Applications consist of

  +.o  actual www pages which display the content. These pages can be
     designed individually. At one spot, they contain an "include"
     directive which is automatically replaced by the current content
     whenever a user requests this page, and

  +.o  a database engine including a permission system, a storage and a
     content managing system. This system has a www interface and
     administrators, editors and authors of a certain page can do their
     work completely using that interface.


  1.1...2.2...  S.Sl.li.ic.ce.es.s

  Action Applications provide something called _.s_.l_.i_.c_.e_.s which represent
  one _.a_.p_.p_.l_.i_.c_.a_.t_.i_.o_.n each. Each application/slice has its own content, its
  own configuration, permissions, and so on. If you run the Action
  Applications on a server, you can set up such slices for your users
  and grant individual _.s_.l_.i_.c_.e _.a_.d_.m_.i_.n_.i_.s_.t_.r_.a_.t_.i_.o_.n _.r_.i_.g_.h_.t_.s. Users are then
  administering their respective slices in every way.

  Slices are of a certain _.t_.y_.p_.e. There are currently seven slice types
  implemented within the Action Applications:

  +.o  News

  +.o  Action Alerts

  +.o  Event Listings

  +.o  Press Release Publisher

  +.o  Job Listing

  +.o  Address List and

  +.o  Media Monitoring.

     Slice types differ in information field names, number of fields and
     default presentation. Still, all the slice types work basically in
     the same way. It is possible to add your own slice type if those do
     not suit your needs.


  1.1...3.3...  U.Us.se.er.rs.s,., R.Ro.ol.le.es.s a.an.nd.d P.Pe.er.rm.mi.is.ss.si.io.on.ns.s

  Action Applications provides its own user management engine.
  Authentication and authorization are implemented by a permission
  system which supports two different back ends: LDAP and SQL. You are
  free to choose which back end you want to use. In either case, it is
  possible to create groups of users and groups of groups. Privileges
  which are granted to the group will be promoted to all its members.

  There are five roles:

     R.Re.ea.ad.de.er.r...
        Readers do not need to have user accounts in the Action
        Applications permission system. Most of the times, they actually
        do not realize that they have to do with something like the
        Action Applications. They just view regular WWW pages and can
        read the information provided by the Action Application slice
        owners.

     A.Au.ut.th.ho.or.r...
        Authors must have user accounts in the Action Applications
        permission system.  The role "author" is bound to a certain
        slice. Any Action Applications user who has "author" privileges
        for an Action Applications slice can submit new information
        items for this slice and remove and edit her own submissions.

     E.Ed.di.it.to.or.r...
        Editors must have user accounts in the Action Applications
        permission system.  The role "editor" is bound to a certain
        slice. An Action Applications user who has "editor" privileges
        for an Action Applications slice can do everything an author for
        this slice can. Additionally, she can pick items from other
        slices, and edit, approve or expire every item her slice, which
        includes other authors' items, as well.  An editor has full
        control over items which were published in her slice, but cannot
        modify the full text of items imported from other slices (the so
        called ?fed items?).

     A.Ad.dm.mi.in.ni.is.st.tr.ra.at.to.or.r...
        Administrators must have user accounts in the Action
        Applications permission system. The role "administrator" is
        bound to a certain slice.  An Action Applications user who has
        "administrator" privileges for an Action Applications slice can
        do everything an editor for this slice can. Additionally, she
        can set or change the configuration of her slice. The
        administrator can design the layout of the web site, define
        which categories are used in the slice and from and to which
        other slices items are shared. She also sets which parameters
        are predefined and which can be modified by the authors/editors
        of the slice.

     S.Su.up.pe.er.r A.Ad.dm.mi.in.ni.is.st.tr.ra.at.to.or.r...
        Super administrators must have user accounts in the Action
        Applications permission system. The role "super administrator"
        is _.n_.o_.t bound to a slice. Super administrators (superadmins) can
        do everything. This means, they can do anything a slice
        administrator can, but for _.e_.v_.e_.r_.y slice; additionally, they can
        add slices to the system.

  Permission management can generally be done by everyone for roles
  below their own level.


  1.1...4.4...  A.Ac.ct.ti.io.on.n A.Ap.pp.pl.li.ic.ca.at.ti.io.on.ns.s S.So.of.ft.tw.wa.ar.re.e C.Co.om.mp.po.on.ne.en.nt.ts.s

  Action Applications consist of several software components. Only one
  of them is provided by the APC Action Applications package:

  +.o  The APC Action Application software. These are basically a set of
     PHP scripts running within a web server.

  +.o  A database server.  The database server does not have to be on the
     same host as the other components. It can be used for other
     applications as well.

  +.o  Optionally a LDAP server. LDAP provides access control to the
     Action Applications.  It is possible to use a different permission
     system, such as a SQL database based one. LDAP has the advantage of
     being a universal directory service whose information can be used
     by other applications, such as address books or email delivery
     services, too.

  +.o  A WWW Server. The WWW Server provides the access from the network
     via the http protocol. It runs the Action Applications programs
     whenever someone accesses the Action Application controlled pages.

  +.o  PHP3. The PHP interpreter is needed to execute the Action
     Applications PHP scripts.

     See section ``Requirements / Preconditions / Suggested
     Environment'' for details about the installation of all the
     components.


  1.1...5.5...  C.Co.on.nv.ve.en.nt.ti.io.on.ns.s u.us.se.ed.d i.in.n t.th.hi.is.s d.do.oc.cu.um.me.en.nt.t

  Command line input is shown including the command line prompt so it is
  clear which lines should be typed in. The prompt indicates if a
  command should be run as a normal user or as root: For normal users,
  the prompt is %, and for root, the prompt is #.

  An example is shown below:


       ______________________________________________________________________
       % uptime
       ______________________________________________________________________







































  2.2...  R.Re.eq.qu.ui.ir.re.em.me.en.nt.ts.s /./ P.Pr.re.ec.co.on.nd.di.it.ti.io.on.ns.s /./ S.Su.ug.gg.ge.es.st.te.ed.d E.En.nv.vi.ir.ro.on.nm.me.en.nt.t

  2.2...1.1...  H.Ha.ar.rd.dw.wa.ar.re.e R.Re.eq.qu.ui.ir.re.em.me.en.nt.ts.s

  The Action Applications can run on every computer which runs one of
  the supported operating systems.

  There is probably a minimum requirement in terms of processor speed
  and amount of memory. If the Action Applications run on a single
  computer (including the MySQL database back end), it should be no less
  than a 200 MHz processor and 64 MByte of RAM.


  2.2...2.2...  S.So.of.ft.tw.wa.ar.re.e R.Re.eq.qu.ui.ir.re.em.me.en.nt.ts.s

  Note: There are instructions for the installation of all software
  modules but the operating system in the next chapter: ``Installation
  of other packages needed by the Action Applications''

  2.2...2.2...1.1...  O.Op.pe.er.ra.at.ti.in.ng.g S.Sy.ys.st.te.em.m

  The primary supported operating system is GNU/Linux. However, the
  Action Applications should run on any unix or unix-like operating
  system which can run all the other software components. The Action
  Applications were developed and tested on R.Re.ed.d H.Ha.at.t L.Li.in.nu.ux.x 6.0 and 6.2,
  so it is recommended to use this OS.  This installation guide has a
  strong focus on Red Hat Linux.

  It is known that Action Applications also run on FreeBSD 2.2.7.


  2.2...2.2...2.2...  D.Da.at.ta.ab.ba.as.se.e S.Se.er.rv.ve.er.r

  An SQL database server is needed by the Action Applications in order
  to store all the information.  The only supported SQL server so far is
  the M.My.yS.SQ.QL.L database server. The data is organized in several tables in
  the database. Action Applications need one logical database within the
  database server. The server can be used for other applications as
  well.

  The database server does not need to be on the same machine as the
  other components are.

  Action Applications need at least MySQL version 3.22.32. Older version
  may work but have not been tested, and they contain known security
  holes.

  If you want to use a different database server than MySQL, for
  example, if you have already a database server running, you will have
  to do some porting work.  Action Applications were written with
  database back end portability in mind, and as little as possible MySQL
  specific functions were used. It is important that there is PHP
  support for the database server you want to use.


  2.2...2.2...3.3...  P.Pe.er.rm.mi.is.ss.si.io.on.n S.Sy.ys.st.te.em.m

  If you want to use LDAP as the permission system, you should use the
  O.Op.pe.en.nL.LD.DA.AP.P server software. Other LDAP servers should work, too, but the
  Action Applications have been tested with OpenLDAP only.

  If you have already an OpenLDAP server running, you may skip the rest
  of this section.


  Using LDAP, some thoughts about the LDAP database organization should
  be wasted. An LDAP database is an hierarchically structured system of
  objects, each member of one or more certain classes.  Every object in
  your database has its place in the potentially global LDAP hierarchy.
  Each object has a unique name, the so called _.d_.i_.s_.t_.i_.n_.g_.u_.i_.s_.h_.e_.d _.n_.a_.m_.e, or
  short _.d_.n. The dn consists of the full "path" from the global LDAP name
  space to the object, similar to names in the domain name system.

  In order to set up the LDAP server for Action Applications, you need
  to figure out some information you want to use:

  +.o  Your base dn. This is the common part all your LDAP objects will
     have in their dn, describing the "path" from the global LDAP name
     space to your organization. It is recommended that you use a domain
     name you own for that. (You could also use a geographical category,
     but this is not described here.) A domain name can be described in
     a LDAP dn using the _.d_.c attribute. For example, the base dn for a
     possible domain name _.e_.c_.n_.._.a_.p_.c_.._.o_.r_.g would be dc=ecn,dc=apc,dc=org.
     Or you can use only simply ou=AA.

  +.o  Your LDAP administrative account. OpenLDAP's built-in access
     control needs a _.r_.o_.o_.t object which has all privileges. Once it
     exists, the root object can be used to modify the data stored in
     the LDAP database.  Like every object in the database, the root
     object needs a dn. It is recommended that you use the canonical
     name _.r_.o_.o_.t. Following the example above, this gives us a root object
     dn of cn=root,dc=ecn,dc=apc,dc=org. Or simply cn=root,ou=AA.

  Note: As with the database server, the OpenLDAP server does not
  necessarily need to be running on the same machine as the Action
  Applications.

  If you are _.n_.o_.t using LDAP as the permission system basis, permission
  information will be stored within the SQL database.


  2.2...2.2...4.4...  W.WW.WW.W (.(h.ht.tt.tp.p).) S.Se.er.rv.ve.er.r

  The Action Applications have been developed and tested with the a.ap.pa.ac.ch.he.e
  http server. Other http servers might work, too, but there are some
  things to consider:

  +.o  The Action Application relay on a feature in the apache http server
     which allows to pass GET parameters (query strings) to scripts
     which are run from a SSI (server side include) command in a page.
     It is known that the Microsoft Internet Information Server, for
     example, does not do that.

  +.o  The apache http server can be configured to load PHP as a _.m_.o_.d_.u_.l_.e.
     This speeds things up a lot because the PHP interpreter does not
     have to be loaded every time a PHP script runs. Action Applications
     work in CGI mode as well, though.


  2.2...2.2...5.5...  P.PH.HP.P

  Action Applications are written in PHP3. The minimum version to use
  should be PHP 3.0.7 but this has not been tested; we know they work
  with PHP 3.0.12 and newer up to 3.0.16. PHP4 has not been tested,
  either.

  PHP can be build as a _.m_.o_.d_.u_.l_.e _.f_.o_.r _.t_.h_.e _.a_.p_.a_.c_.h_.e _.h_.t_.t_.p _.s_.e_.r_.v_.e_.r or as a
  _.s_.t_.a_.n_.d_.a_.l_.o_.n_.e _.p_.r_.o_.g_.r_.a_.m. The first way is preferred for performance
  reasons.

  Your PHP needs optional modules:


  +.o  A module is needed to access your SQL database. For example, if you
     are using MySQL as the database, you need the MySQL module for PHP.

  +.o  If you are using LDAP as the permission system, you need the LDAP
     module for PHP.

  The modules can be

  +.o  _.c_.o_.m_.p_.i_.l_.e_.d _.i_.n_.t_.o _.P_.H_.P or

  +.o  _.l_.o_.a_d_.e_.d _.a_.t _.r_.u_.n _.t_.i_.m_.e.

  Both ways are described in the ``PHP installation section''.


  2.2...3.3...  K.Kn.no.ow.w-.-H.Ho.ow.w R.Re.eq.qu.ui.ir.re.em.me.en.nt.ts.s

  To install the Action Applications, you will need some basic unix
  skills. You should have installed programs before and be familiar with
  administration of your system.


  2.2...3.3...1.1...  O.Ot.th.he.er.r P.Pr.re.ec.co.on.nd.di.it.ti.io.on.ns.s











































  3.3...  I.In.ns.st.ta.al.ll.la.at.ti.io.on.n o.of.f O.Ot.th.he.er.r P.Pa.ac.ck.ka.ag.ge.es.s n.ne.ee.ed.de.ed.d b.by.y A.Ac.ct.ti.io.on.n A.Ap.pp.pl.li.ic.ca.at.ti.io.on.ns.s

  3.3...1.1...  P.Pl.la.at.tf.fo.or.rm.m

  The installation instructions given here are intended for use with
  RedHat Linux. We used version 6.0 and 6.2. This specifically means
  that the _.r_.p_.m tool is used wherever possible.

  _.I_.f _.y_.o_.u_.r _.s_.y_.s_.t_.e_.m _.d_.o_.e_.s _.n_.o_.t _.s_.u_.p_.p_.o_.r_.t _.t_.h_.e _.r_.p_.m _.t_.o_.o_.l, most procedures will be
  quite different from what is shown here.  You will probably have to do
  most installations by building the software itself. It is beyond the
  scope of this document to describe that although necessary
  configurations options will be mentioned.


  3.3...2.2...  M.My.yS.SQ.QL.L d.da.at.ta.ab.ba.as.se.e b.ba.ac.ck.k e.en.nd.d

  Check if you have already MySQL 3.22.32 or newer installed:


       ______________________________________________________________________
       % rpm -q MySQL
       ______________________________________________________________________




  If it is not installed or if the version used is too old, install it.
  If you don't have a CD with MySQL RPM files, download it from
  <http://www.mysql.com/downloads/mysql.html>. (MySQL is _.n_.o_.t included in
  RedHat Linux.) Use the stable release version. Get files from the
  "standard binary RPMs" part: "_.S_.e_.r_.v_.e_.r _.f_.o_.r _.._.._.. _.s_.y_.s_.t_.e_.m_.s", "_.C_.l_.i_.e_.n_.t
  _.p_.r_.o_.g_.r_.a_.m_.s _.f_.o_.r _.._.._.. _.s_.y_.s_.t_.e_.m_.s" and "_.I_.n_.c_.l_.u_.d_.e _.f_.i_.l_.e_.s _.a_.n_.d _.l_.i_.b_.r_.a_.r_.i_.e_.s _.f_.o_.r
  _.d_.e_.v_.e_.l_.o_.p_.m_.e_.n_.t _.f_.o_.r _.._.._.. _.s_.y_.s_.t_.e_.m_.s".  (The latter is needed re recompile php
  if this has to be done, see below.)

  As root, install the RPMs:


       ______________________________________________________________________
       # rpm -Uv MySQL-3.22.32-1.i386.rpm
       ______________________________________________________________________




  This command will install the MySQL database server, create some
  administrative tables and already start the server itself. It also
  creates a file in /etc/rc.d/init.d/ and symbolic links in
  /etc/rc.d/rc?.d/ so the server is started and stopped properly on sys-
  tem start and shutdown.

  Also install the MySQL client tools and the development files:


       ______________________________________________________________________
       # rpm -Uv MySQL-client-3.22.32-1.i386.rpm
       # rpm -Uv MySQL-devel-3.22.32-1.i386.rpm
       ______________________________________________________________________




  Since the server is now running, it can be accessed. It is a good idea
  to immediately set a password for the MySQL root user.  Remind the
  password - better not use _.m_.y_.s_.q_.l_.p_.a_.s_.s for obvious reasons.  We will
  refer to this password as the _.m_.y_.s_.q_.l _.r_.o_.o_.t _.p_.a_.s_.s_.w_.o_.r_.d.


       ______________________________________________________________________
       # mysqladmin -u root password 'mysqlpass'
       ______________________________________________________________________




  Then create your initial Action Applications database. To do this, you
  need the file aadb.sql from the Action Applications doc directory. It
  contains SQL commands which create the database. When queried for a
  password, use the mysql root password.


       ______________________________________________________________________
       # mysql -u root -p
       Enter password:
       mysql> CREATE DATABASE aadb;
       Query OK, 1 row affected (0.03 sec)

       mysql> QUIT
       Bye
       # mysql -u root -p aadb < doc/aadb.sql
       Enter Password:
       #
       ______________________________________________________________________




  Create a user in MySQL that will be able to access the new aadb
  database.  Again, you will need to provide a new password; below, it
  is _.p_.a_.s_.s_.w_.o_.r_.d_.2.  Use a different one and remind it. We will refer to
  this password as the _.a_.a_.d_.b_.u_.s_.e_.r _.p_.a_.s_.s_.w_.o_.r_.d.


       ______________________________________________________________________
       # mysql -u root -p
       mysql> USE mysql;
       mysql> GRANT SELECT,INSERT,UPDATE,DELETE
       ON aadb.*
       TO aadbuser@localhost
       IDENTIFIED BY 'password2';
       Query OK, 0 rows affected (0.05 sec)

       mysql> FLUSH PRIVILEGES;
       mysql> quit
       ______________________________________________________________________





  3.3...3.3...  O.Op.pe.en.nL.LD.DA.AP.P

  3.3...3.3...1.1...  P.Pa.ac.ck.ka.ag.ge.e I.In.ns.st.ta.al.ll.la.at.ti.io.on.n

  Note: You only need the OpenLDAP server if you decided to use LDAP as
  the permission system. The OpenLDAP server does not need to be on the
  same host as the Action Applications themselves are.

  Check if you have already the OpenLDAP server installed:


  ______________________________________________________________________
  % man slapd
  No manual entry for slapd
  ______________________________________________________________________




  If the manual page appears, it is very likely you have the OpenLDAP
  server on the machine. (This check is preferred over the rpm way
  because the OpenLDAP rpm exists only for a short time so far and many
  machines probably have it installed without the rpm.)

  OpenLDAP is included in RedHat Linux 6.1; releases prior to 6.1 don't
  have it. It is possible to install the rpms on any 6.x RedHat Linux
  though.

  If you don't have the OpenLDAP server installed, and if you don't have
  the rpm's, get the rpm's from a RedHat mirror site, for example from
  <ftp://ftp.tu-chemnitz.de/pub/linux/redhat-
  updates/6.2/i386/openldap-1.2.9-6.i386.rpm> and <ftp://ftp.tu-
  chemnitz.de/pub/linux/redhat-updates/6.2/i386/openldap-
  devel-1.2.9-6.i386.rpm> and install them:


       ______________________________________________________________________
       # rpm -Uv openldap-1.2.9-6.i386.rpm
       openldap-1.2.9-6
       # rpm -Uv openldap-devel-1.2.9-6.i386.rpm
       openldap-devel-1.2.9-6
       ______________________________________________________________________





  3.3...3.3...2.2...  S.Se.et.tu.up.p:.: C.Co.on.nf.fi.ig.gu.ur.ra.at.ti.io.on.n

  If you didn't have an OpenLDAP server running, you will need to create
  the /etc/openldap/slapd.conf file - this is the server configuration
  file.  Use the file doc/slapd.conf from the Action Applications
  distribution to create it.  This file is well documented and contains
  hints about which spots need to be modified. _.T_.h_.e _.L_.D_.A_.P _.s_.e_.r_.v_.e_.r _.w_.i_.l_.l _.n_.o_.t
  _.w_.o_.r_.k _.p_.r_.o_.p_.e_.r_.l_.y _.i_.f _.y_.o_.u _.d_.o_.n_.'_.t _.e_.d_.i_.t _.t_.h_.i_.s _.f_.i_.l_.e_.. You will need some basic
  data to fill in here; see at ``LDAP basic info'' for details.

  The root dn password in this file can be trivial for now (leave it as
  it is, "password"), we will replace it shortly with a secure one. We
  refer to this password as the _.l_.d_.a_.p _.r_.o_.o_.t _.d_.n password.

  Also you need to copy some other files from the Action Applications
  doc directory to the /etc/openldap/ directory and change the file mode
  of the main configuration file:


       ______________________________________________________________________
       # chmod 600 /etc/openldap/slapd.conf
       # cp slapd.oc.netscape.conf slapd.at.netscape.conf slapd.oc.apc.conf slapd.at.apc.conf /etc/openldap/
       ______________________________________________________________________




  Edit the file /etc/openldap/ldap.conf. After installation, it only
  contains comments. Put in two lines containing your base dn and the
  host where the ldap server runs:
       ______________________________________________________________________
       BASE    ou=AA
       HOST    localhost
       ______________________________________________________________________




  (This file is used by the programs that _.a_.c_.c_.e_.s_.s a ldap server, not by
  the server itself. It only affects accessing programs on the machine
  where the programs run.)

  Create the directory where the LDAP database will live (again, replace
  the domain name with the one your base dn was derived from):


       ______________________________________________________________________
       # mkdir /var/lib/ldap/ecn.apc.org
       ______________________________________________________________________






  3.3...3.3...3.3...  S.St.ta.ar.rt.t t.th.he.e l.ld.da.ap.p s.se.er.rv.ve.er.r

  Try to start the ldap server and check messages from the messages
  logfile (normally /var/log/messages):


       ______________________________________________________________________
       # /etc/rc.d/init.d/ldap start
       Starting ldap:                                             [  OK  ]
       # tail /var/log/messages
       [...]
       Jul 17 11:01:28 ecn ldap: slapd startup succeeded
       ______________________________________________________________________




  Make the ldap server start on system boots:


       ______________________________________________________________________
       # chkconfig ldap on
       ______________________________________________________________________





  3.3...3.3...4.4...  I.In.ni.it.ti.ia.al.l d.da.at.ta.ab.ba.as.se.e c.cr.re.ea.at.ti.io.on.n

  The OpenLDAP server needs an initial database before its first start.
  To create this database, you need a _.l_.d_.i_.f format file which can be
  translated into the database by the ldapmodify command. There is an
  example ldif file, namely LDIF.ini, in the doc/ directory. Edit this
  file to suit your needs according to the following instructions.

  The initial ldif file should contain four objects:

  +.o  Action Applications base object

  +.o  The Action Applications account object (used by Action Applications
     to access the ldap server)

  +.o  ldap tree for AA's users

  +.o  ldap tree for ACLs used by the Action Applications

     Objects are separated by blank lines. Each line consists of a
     keyword, followed by a colon, followed by a value. The first line
     of each object is the dn, thus the keyword is "dn". The other
     object lines are its attributes.

  You can edit this file, but it's not necessary.

  We can tell the ldap server to create the objects:



       ______________________________________________________________________
       % ldapmodify -a -f ldiffile -D "cn=root,ou=AA" -w password
       adding new entry ou=AA

       adding new entry cn=aalduser,ou=AA
       ______________________________________________________________________





  If the server responds with an error message:

     l.ld.da.ap.p_._a.ad.dd.d:.: I.In.ns.su.uf.ff.fi.ic.ci.ie.en.nt.t a.ac.cc.ce.es.ss.s
        Check the rootdn: entry in the slapd.conf file and what you
        typed after the -D switch to ldapmodify. They must match.

     l.ld.da.ap.p_._a.ad.dd.d:.: O.Ob.bj.je.ec.ct.t c.cl.la.as.ss.s v.vi.io.ol.la.at.ti.io.on.n
        The objects in the ldif file are not consistent. Check if you
        accidently deleted lines from the file.

  In order to check the server, search all the objects you just added.
  The result should be similar to the ldif file you just used.


       ______________________________________________________________________
       % ldapsearch -L objectclass=\*
       ______________________________________________________________________




  If you get an error message or nothing, check the /etc/openl-
  dap/ldap.conf file for the BASE and HOST entries.


  3.3...3.3...5.5...  L.LD.DA.AP.P p.pa.as.ss.sw.wo.or.rd.ds.s

  There are two passwords we must maintain for the ldap server. We refer
  to them as the _.r_.o_.o_.t _.d_.n _.p_.a_.s_.s_.w_.o_.r_.d, which is used to access the LDAP root
  account and the _.a_.a_.l_.d_.u_.s_.e_.r _.a_.c_.c_.o_.u_.n_.t _.p_.a_.s_.s_.w_.o_.r_.d, which the Action
  Applications use to access the aalduser account and the LDAP server.

  We should now set the root dn password in /etc/openldap/slapd.conf. To
  do this, first set the aalduser account password using ldappasswd,
  then make a query to the ldap server so we get an encrypted version of
  the password back, and copy and paste the encrypted password into the
  sldap.conf file.  When you issue the following commands, the password
  given after the -w switches must match the _.o_.l_.d root dn password which
  is still defined in clear text in /etc/openldap/slapd.conf. When
  prompted for the new password, enter the new root dn password you want
  to set. And remind it!


       ______________________________________________________________________
       % ldappasswd -D "cn=root,ou=AA" -w password -t "cn=aalduser,ou=AA" -H ssha
       New password:
       Re-enter new password:
       ldapsearch -D "cn=root,ou=AA" -w password -L cn=aa
       dn: cn=aalduser,ou=AA
       objectclass: top
       objectclass: person
       cn: aa
       sn: Toolkit
       description: Account used by AA to access LDAP DB
       userpassword: {ssha}1KoDEQd/MrY+JPnFgotki5AZrCyfGZYr
       ______________________________________________________________________




  If everything worked right, you get the line "userpassword" as shown.
  This is the encrypted version of the new root dn password you entered.
  Paste this string (including the "{ssha}") into the rootpw: line in
  /etc/openldap/slapd.conf.  After the next server restart, the old root
  dn password "password" will no longer work, instead, you use the
  password you just entered.

  Try to access the ldap server using the aalduser account:


       ______________________________________________________________________
       % ldapsearch -D "cn=aalduser,ou=AA" -W -L objectclass=\*
       Enter LDAP Password:
       ______________________________________________________________________




  You should get all the objects that are stored. In case of an error
  message, check the spelling of the command line... errors most likely
  have to do with spelling errors.

  N.No.ow.w you can change the password for the aalduser account again so it
  is different from the root dn password:



  ______________________________________________________________________
  % ldappasswd -D "cn=root,ou=AA" -t "cn=aalduser,ou=AA" -H ssha -W
  ______________________________________________________________________






  3.3...4.4...  I.In.ns.st.ta.al.ll.li.in.ng.g t.th.he.e A.Ap.pa.ac.ch.he.e W.We.eb.b S.Se.er.rv.ve.er.r

  Use the RPM that comes from RedHat. We have had success with the
  versions 1.3.9 and 1.3.12. You need to install the "devel" packages,
  too.

  To find out which version of apache httpd you have, use:


       ______________________________________________________________________
       % httpd -v
       Server version: Apache/1.3.9 (Unix)  (Red Hat/Linux)
       Server built:   Apr  7 1999 17:17:41
       ______________________________________________________________________




  To install the apache web server, use these commands. Not that in this
  example, the apache itself was already installed, but the development
  package was missing (this is the default case for RedHat Linux).


       ______________________________________________________________________
       # rpm -Uv /mnt/cdrom/RedHat/RPMS/apache-1.3.9-7.i386.rpm
       package apache-1.3.9-7 is already installed
       # rpm -Uv /mnt/cdrom/RedHat/RPMS/apache-devel-1.3.9-7.i386.rpm
       apache-devel-1.3.9-7
       ______________________________________________________________________




  Configuring the web server is a task for a later point in time because
  RPM will do part of this work.


  3.3...5.5...  P.PH.HP.P3.3

  3.3...5.5...1.1...  P.PH.HP.P3.3 i.in.ns.st.ta.al.ll.la.at.ti.io.on.n

  Hint: The use of PHP4 has not yet been tested.

  php3 runs within the apache web server as a module. We need a version
  of php3 which includes support for _.t_.w_.o _.o_.p_.t_.i_.o_.n_.a_.l _.p_.h_.p _.m_.o_.d_.u_.l_.e_.s, namely
  ldap and mysql. These modules provide access to ldap and mysql
  databases, respectively, from php3 programs.  (If you don't use ldap
  with the Action Applications, you will not need the ldap php support.)

  There are many ways to install all this, and many can generate a lot
  of trouble. The cleanest and easiest way is, again, to use RPMs.


  3.3...5.5...2.2...  T.Te.es.st.ti.in.ng.g p.ph.hp.p3.3 i.in.ns.st.ta.al.ll.la.at.ti.io.on.n

  First, create a test WWW page to find out the status of php3 support
  on your system. This can be done easily by executing this command
  (assuming /home/httpd/heml is your DocumentRoot directory:


       ______________________________________________________________________
       echo "<?php phpinfo() ?>" > /home/httpd/html/test.php3
       ______________________________________________________________________




  Access the page with a web browser (http://localhost/test.php3).

  +.o  If you see the string php phpinfo() ?, you do not have php3
     installed or at least it is not enabled.

  +.o  If you see a page beginning with PHP Version, you have a working
     php. Browse through the Extensions section. Look for an extension
     named MySQL and, if you are using the LDAP permission system, for
     one named LDAP. If both are there, you are lucky because the php
     setup id complete; otherwise, you must install the missing parts.


  3.3...5.5...3.3...  I.In.ns.st.ta.al.ll.li.in.ng.g P.PH.HP.P

  Unfortunately, as of this writing, there is no mysql support for php
  which comes as an rpm made by RedHat. There are some mysql modules for
  php on the RedHat server, but they are all for older versions of php.

  RedHat 6.1 and 6.2 above have a php rpm which is prepared for
  inclusion of other php modules. The ldap module is provided. The mysql
  module is not provided, but it is possible to build the mysql module.
  The advantage of going this way is that you will have the RPMs which
  are easy to install on all your machines and that the RPM install
  scripts will manage necessary configuration file changes by
  themselves.  The disadvantage is that the RPM build process requires
  some more packages installed. This is described in the next section.

  If you don't want to use RPMs, you must build PHP the traditional way.
  This is described in the sections following the next section.


  3.3...5.5...4.4...  B.Bu.ui.il.ld.di.in.ng.g t.th.he.e P.PH.HP.P R.RP.PM.Ms.s i.in.nc.cl.lu.ud.di.in.ng.g m.my.ys.sq.ql.l


  1. To build the PHP RPMs including the mysql support, you need the
     following packages installed which you find at www.redhat.com:

  +.o  apache-devel

  +.o  imap-devel

  +.o  openldap-devel

  +.o  postgresql-devel

  +.o  MySQL-devel

  +.o  apache-devel (version 1.3.9 or newer)

  +.o  and there must be a general development environment.

  2. In order to build RPMs, you need an RPM build environment.  For a
     quick setup of this, use the following commands:



  ______________________________________________________________________
  % mkdir ~/rpmbuild ~/rpmbuild/RPMS ~/rpmbuild/SRPMS ~/rpmbuild/BUILD ~/rpmbuild/SOURCES ~/rpmbuild/SPECS; echo "%_topdir ${HOME}/rpmbuild" >~/.rpmmacros
  ______________________________________________________________________





  3. You need the php source RPM from RedHat and install it (do not
     install it before you have the RPM build environment):


       ______________________________________________________________________
       % rpm -Uv php-3.0.15-2.src.rpm
       ______________________________________________________________________




  In this example, the php source rpm version 3.0.15-2 was used.

  4. Edit the file ~/rpmbuild/SPECS/php.spec. This file is the
     description used by rpm to build the php packages, and the mysql
     section is commented out (this is the reason for the fact that
     there is no mysql module for php on the RedHat server). You need to
     uncomment all lines which concern mysql, and you need to add a
     section describing the mysql package. There is a patch which does
     the right thing for the version 3.0.15-2; the patch can be found in
     the Action Applications doc directory as php-spec.patch. To apply
     this patch, copy it to the ~/rpmbuild/SPECS directory and use this
     command:


       ______________________________________________________________________
       % cd ~/rpmbuild/SPECS; patch < php-spec.patch
       ______________________________________________________________________





  5. Run the rpm build process:


       ______________________________________________________________________
       % rpm -ba ~/rpmbuild/SPECS/php.spec
       ______________________________________________________________________




  This will take some time. After everything is done, you will find all
  the RPMs in the directory ~/rpmbuild/RPMS/i386/.

  If you had already php installed, better uninstall it before you
  install the new versions.










  ______________________________________________________________________
  # rpm --erase --nodeps php php-manual php-mysql php-ldap php-pgsql php-imap
  # rpm -iv php-3.0.15-2.i386.rpm php-manual-3.0.15-2.i386.rpm php-mysql-3.0.15-2.i386.rpm php-ldap-3.0.15-2.i386.rpm
  php-3.0.15-2
  php-manual-3.0.15-2
  php-mysql-3.0.15-2
  php-ldap-3.0.15-2
  ______________________________________________________________________




  On installation, RPM will edit the apache web server configurations
  file (/etc/httpd/conf/httpd.conf) and php initialization file
  (/etc/httpd/php.ini) automatically.


  3.3...5.5...5.5...  B.Bu.ui.il.ld.di.in.ng.g P.PH.HP.P3.3 w.wi.it.th.ho.ou.ut.t R.RP.PM.Ms.s

  If you don't want to use RPM for PHP3 installation, you can as well
  build it from the scratch. If you want to do this, you will need

  +.o  The PHP3 sources themselves. get them from
     <http://www.php.net/downloads.php>.

  +.o  The apache development files installed (apache-devel)

  +.o  The mysql development files installed (MySQL-devel)

  +.o  The openldap development files installed (openldap-devel) if you
     plan to use LDAP as the permission system.

  Unpack the PHP3 distribution, change into that directory, configure
  and build. This example shows a build _.w_.i_.t_.h the LDAP module; remove the
  --with-ldap if you don't use LDAP:


       ______________________________________________________________________
       % tar xvfz php-3.0.16.tar.gz
       % cd php-3.0.16
       % ./configure -with-mysql=yes --with-apxs=/usr/sbin/apxs --enable-track-vars --enable-safe-mode --with-xml --with-ldap --with-config-file-path=/etc/httpd
       % make
       # make install
       /usr/sbin/apxs -i -a -n php3 libphp3.so
       cp libphp3.so /usr/lib/apache/libphp3.so
       chmod 755 /usr/lib/apache/libphp3.so
       [activating module `php3' in /etc/httpd/conf/httpd.conf]
       ______________________________________________________________________





  3.3...6.6...  C.Co.on.nf.fi.ig.gu.ur.ri.in.ng.g t.th.he.e a.ap.pa.ac.ch.he.e w.we.eb.b s.se.er.rv.ve.er.r

  During the PHP3 installation using RPMs, most of the configuration
  work for the web server is already done. If you didn't use RPM to
  install PHP3, you might have to do the following steps. (It does no
  harm to double check if everything is configured correctly anyway.)

  The configuration for the apache takes place in the file
  /etc/httpd/conf/httpd.conf.

  You will need the statement Options +Includes there. This enables the
  so-called _.s_.e_.r_.v_.e_.r _.s_.i_.d_.e _.i_.n_.c_.l_.u_.d_.e_.s (SSI) which are used by the page the
  users read (which contain the actual content). T.Th.hi.is.s c.ca.an.n b.be.e a.a s.se.ec.cu.ur.ri.it.ty.y
  p.pr.ro.ob.bl.le.em.m because whoever can edit these pages can run any command on
  your web server.  (_.I_.n_.c_.l_.u_.d_.e_.s_.N_.O_.E_.X_.E_.C is not enough.)  You might want to
  consider to enable this only for the directories where it is needed
  with _.<_.D_.i_.r_.e_.c_.t_.o_.r_.y_.> statements. See also the chapter on ``''.

  In /etc/httpd/conf/httpd.conf, make sure these lines are not commented
  out:


       ______________________________________________________________________
       AddType application/x-httpd-php3 .php3
       ______________________________________________________________________




  and


       ______________________________________________________________________
       AddType text/html .shtml
       AddHandler server-parsed .shtml
       ______________________________________________________________________




  "Commented out" means That they are prepended by a "#". Remove the
  leading "#" from the lines if it is there.

  Add index.php3 to the tt/DirectoryIndex/ line:


       ______________________________________________________________________
       DirectoryIndex index.html index.shtml index.cgi index.php3
       ______________________________________________________________________




  Restart the web server to reread the configuration files:


       ______________________________________________________________________
       # /etc/rc.d/init.d/httpd restart
       ______________________________________________________________________




  After these configuration steps, PHP should work. You can test this by
  browsing to your test page ( <http://localhost/test.php3>) again.


  3.3...7.7...  P.PH.HP.PL.LI.IB.B i.in.ns.st.ta.al.ll.la.at.ti.io.on.n

  Get PHPLIB from  <http://phplib.netuse.de/download/index.php3>.
  Unpack it, create a directory /home/httpd/phplib and extract the files
  from phplib's php directory to the new directory:







  ______________________________________________________________________
  % tar xvfz phplib-7.2b.tar.gz
  % su
  Password:
  # mkdir /home/httpd/phplib
  # cp phplib-7.2b/php/* /home/httpd/phplib/
  ______________________________________________________________________




  You must add this directory to the line include_path in the
  /etc/httpd/php.ini file. Edit that file so the line looks like this:


       ______________________________________________________________________
       include_path    =  /home/httpd/phplib                 ; UNIX: "/path1:/path2"  Windows: "\path1;\path2"
       ______________________________________________________________________




  (The stuff beginning with the ";" is a comment.)











































  4.4...  I.In.ns.st.ta.al.ll.la.at.ti.io.on.n o.of.f A.Ac.ct.ti.io.on.n A.Ap.pp.pl.li.ic.ca.at.ti.io.on.ns.s

  4.4...1.1...  I.In.ns.st.ta.al.ll.la.at.ti.io.on.n

  Create a directory aa in your httpdocs directory and copy most files
  from the Action Applications distribution there:


       ______________________________________________________________________
       # mkdir /home/httpd/html/aa
       # cd apc-aa-1.1.0
       # cp -R *.css *.php3 admin images include doc /home/httpd/html/aa
       ______________________________________________________________________





  Edit /home/httpd/html/aa/include/config.php3.  This is the main Action
  Applications configuration file. It contains comments which explain
  everything there.  Note that this file may not contain anything before
  the <?php line at the top and after the ?> line at the bottom.

  T.Th.he.e f.fi.il.le.e /home/httpd/html/aa/include/config.php3 now contains
  passwords. It should therefore not be world readable. On the other
  hand, the http server must be able to read it. Read the chapter on
  ``'' for a possible solution for this problem.

  Point your Web browser to <http://localhost/aa/admin/setup.php3>. This
  page helps you to create your initial superadmin account.


  4.4...2.2...  C.Cr.re.ea.at.ti.in.ng.g a.a s.su.up.pe.er.ra.ad.dm.mi.in.n a.ac.cc.co.ou.un.nt.t

  Action Applications users who have the superadmin privilege may create
  new slices in addition to the rights any slice administrator has.

  Creating a superadmin account will be necessary whenever you don't
  have one left.  This is the case at installation time and in case you
  have accidently deleted the last superadmin account or accidently
  revoked the superadmin privilege from the last superadmin account.  To
  create a superadmin account, click on Init and fill in the form
  Superadmin account. Fields marked with an asterisk are required. Click
  on the Create button.

  Now you should see a page with a congratulation and a link _.A_.d_.d _.S_.l_.i_.c_.e.
  Follow this link. You will be asked for login name and password - log
  in with your (new) superadmin account and read on in the next section
  to see how to create a slice.


  4.4...3.3...  Y.Yo.ou.ur.r f.fi.ir.rs.st.t t.te.es.st.t s.sl.li.ic.ce.e

  4.4...3.3...1.1...  C.Cr.re.ea.at.ti.in.ng.g t.th.he.e f.fi.ir.rs.st.t t.te.es.st.t s.sl.li.ic.ce.e

  After a successful login on
  <http://localhost/aa/admin/sliceadd.php3>, you should see the _.S_.l_.i_.c_.e
  _.A_.d_.m_.i_.n_.i_.s_.t_.r_.a_.t_.i_.o_.n _.- _.A_.d_.d _.S_.l_.i_.c_.e page. Choose the slice type (see ``'' for
  details) and say _.A_.d_.d.

  Fill in the form. The fields shown here depend on the slice type, but
  some fields are there for every slice type. Especially fill in the
  following fields:

  +.o  Headline - a title for the slice

  +.o  Short name - a short description of the slices contents

  +.o  Slice URL - the URL of a WWW page where you want to display the
     actual content; this is the place readers will access. The page
     does not need to exist at this time and it does not need to be
     within the action application directory tree

  +.o  Listing length - say 10

  +.o  Fulltext info abstract grab length - say 200.

     You may fill in the other fields, too.  After selecting _.i_.n_.s_.e_.r_.t at
     the page bottom the slice will be created.

  Each slice can have a set of categories. New information items can
  belong to one or more categories. Create your first category by
  selecting _.N_.e_.w. Enter the category name and hit OK.

  At this point in time, you have created a new slice and thus, a new
  action application.


  4.4...3.3...2.2...  A.Ad.dd.di.in.ng.g t.th.he.e f.fi.ir.rs.st.t i.in.nf.fo.or.rm.ma.at.ti.io.on.n i.it.te.em.m t.to.o t.th.he.e t.te.es.st.t s.sl.li.ic.ce.e

  Select _.A_.d_.d _.A_.r_.t_.i_.c_.l_.e. Fill in some information. Make sure to set the
  Expire date to a day in the future and hit _.i_.n_.s_.e_.r_.t.

  The page you see after that tells you the HTML code which you must
  place into the page which is meant to display the content (the slice
  URL).

  You might have got an idea how everything works now?


































  5.5...  C.Cu.us.st.to.om.mi.iz.za.at.ti.io.on.n

  5.5...1.1...  L.La.an.ng.gu.ua.ag.ge.e C.Cu.us.st.to.om.mi.iz.za.at.ti.io.on.n

  5.5...1.1...1.1...  H.Ho.ow.w i.it.t w.wo.or.rk.ks.s

  Action Applications were designed with internationalization in mind.
  There are currently two languages shipping: English and Czech.

  The language configuration is done with statements in the file
  config.php3 which point to other files which contain language
  information.

  Each language has an abbreviation used in the Action Application
  configuration. The abbreviation for English is _.e_.m, Czech is _.c_.z.

  The language information is split up in parts:

  +.o  Common language information in the file
     include/??_common_lang.php3. This is used for non application
     specific language information, for example, for the login box.

  +.o  Application specific language information. Each Action Application
     has its own specific language information in the files
     include/??_*_lang.php3 where * is replaced with an Application
     dependent abbreviation; for example, the _.N_.e_.w_.s _.L_.i_.s_.t_.i_.n_.g Action
     Application's language information lives in the file
     include/??_nefs_lang.php3.

     Of course the file names do not contain question marks; instead,
     the _.?_.? is replaced by the actual language abbreviation. For
     example, the Czech common language file is named
     include/cz_common_lang.php3.

  In include/config.php3, the _.c_.o_.m_.m_.o_.n language files are referenced by a
  _.r_.e_.q_.u_.i_.r_.e statement. The section containing it looks like this:


       ______________________________________________________________________
       # Language: uncomment one language file
       require ($AA_INC_PATH . "en_common_lang.php3");  # English
       # require ($AA_INC_PATH . "cz_common_lang.php3");  # Czech
       ______________________________________________________________________




  Exactly one common language file must be uncommented here. (Again, the
  _.# character at the beginning of the line makes it a comment.)  This
  means that for the common part, one installation of the Action Appli-
  cations (using one config.php3 file) can only use one language for the
  common parts.

  The application specific language files are referenced by assignment
  statements. The relevant section looks like this:











  ______________________________________________________________________
  # index names must be less than 20 characters (as is en_news)
  $ActionAppConfig[en_news][name] = "News";
  $ActionAppConfig[en_news][file] = "en_news_lang.php3";
  # $ActionAppConfig[news][file] = "cz_language.php3";    # Czech language news

  $ActionAppConfig[en_action_alerts][name] = "Action alerts";
  $ActionAppConfig[en_action_alerts][file] = "en_news_lang.php3";

  $ActionAppConfig[en_events][name] = "Events listings";
  $ActionAppConfig[en_events][file] = "en_news_lang.php3";

  $ActionAppConfig[en_press_rel][name] = "Press release publisher";
  $ActionAppConfig[en_press_rel][file] = "en_press_lang.php3";

  $ActionAppConfig[en_jobs][name] = "Job listing";
  $ActionAppConfig[en_jobs][file] = "en_news_lang.php3";

  $ActionAppConfig[en_addresses][name] = "Address list";
  $ActionAppConfig[en_addresses][file] = "en_news_lang.php3";

  $ActionAppConfig[en_media_mon][name] = "Media monitoring";
  $ActionAppConfig[en_media_mon][file] = "en_news_lang.php3";
  ______________________________________________________________________




  As you can see, each Action Application has one line with a descrip-
  tion of the application and one line with a file name containing the
  application specific language information. It is possible to keep the
  same Action Application with more than one different languages.


  5.5...1.1...2.2...  C.Cu.us.st.to.om.mi.iz.zi.in.ng.g a.an.n A.Ac.ct.ti.io.on.n A.Ap.pp.pl.li.ic.ca.at.ti.io.on.n t.to.o a.a n.ne.ew.w l.la.an.ng.gu.ua.ag.ge.e

  These are the steps you will have to perform if you want to set up an
  Action Application in a different language than the default, English:

  +.o  Figure out the language abbreviation for your new language. Check
     if there are already files for this language in the include/
     directory. If not, make the abbreviation up. In the rest of these
     instructions, the example language abbreviation _.l_.g will be used.

  +.o  If you want the common non application specific parts of the Action
     Applications to be in that language, too, check if there is a file
     include/lg_common_lang.php3 for your language. If not, copy the
     English version include/en_common_lang.php3 to
     include/lg_common_lang.php3. Translate the English to your
     language. Then, edit include/config.php3, comment out the line for
     the English file and put in yours:


       ______________________________________________________________________
       # Language: uncomment one language file
       # require ($AA_INC_PATH . "en_common_lang.php3");  # English
       # require ($AA_INC_PATH . "cz_common_lang.php3");  # Czech
       require ($AA_INC_PATH . "lg_common_lang.php3");
       ______________________________________________________________________




  +.o  Find the application specific file for the Action Application you
     want to translate in the include/ directory. Copy it the same way,
     replacing the _.e_.n with your _.l_.g and edit it as above.
  +.o  Add another block to config.php3 where the application specific
     language information lives. For example, for a new news listing
     application in your language _.l_.g add these lines:


       ______________________________________________________________________
       $ActionAppConfig[lg_news][name] = "Njuigkeiten";
       $ActionAppConfig[lg_news][file] = "lg_news_lang.php3";
       ______________________________________________________________________




  Beware that the _.e_.n is replaced with _.l_.g at t.th.hr.re.ee.e spots.  This example
  assumes that _.N_.e_.w_.s is translated _.N_.j_.u_.i_.g_.k_.e_.i_.t_.e_.n in your new language.

  Note: You do not need to remove the English version of News Listing!

  Note: If you want the pages for this Action Application be displayed
  with a different character set than the default, change the
  HTML_PAGE_BEGIN setting.

  After this procedure, the new lg language Action Application will show
  up in the pull down box on the _.a_.d_.d _.s_.l_.i_.c_.e page.


  5.5...2.2...  C.Cr.re.ea.at.ti.in.ng.g n.ne.ew.w A.Ac.ct.ti.io.on.n A.Ap.pp.pl.li.ic.ca.at.ti.io.on.ns.s

  5.5...2.2...1.1...  O.Ov.ve.er.rv.vi.ie.ew.w

  If you are not satisfied with the collection of Action Applications
  and want to set up your own flavor, you can create your own Action
  Application.

  Creating a new Action Application is very similar to customizing for a
  new language. Fist read the section ``Customization, Language, How it
  works''.

  In order to create a new Action Application, follow these steps:

  +.o  Figure out an abbreviation for your new application such as _.n_.e_.w_.s,
     _.e_.v_.e_.n_.t_.s etc. This should be less than 15 characters and only contain
     letters and underscores (_). For this example, we assume your new
     Action Application will have the abbreviation _.p_.i_.z_.z_.a because you are
     about to create a pizza place listing.

  +.o  Copy a template language file, for example,
     include/en_news_lang.php3, to a new name. The new name should
     contain your new abbreviation instead of the news. Thus, in our
     example, it is called include/en_pizza_lang.php3.

  +.o  Edit the new file to create the new Action Application, replacing
     the old information there with your new one. See next section for
     details.

  +.o  Add the new application to the include/config.php3 file, just as if
     you would add a new language.


  5.5...2.2...2.2...  E.Ed.di.it.ti.in.ng.g t.th.he.e l.la.an.ng.gu.ua.ag.ge.e f.fi.il.le.e t.to.o c.cr.re.ea.at.te.e a.a n.ne.ew.w A.Ac.ct.ti.io.on.n A.Ap.pp.pl.li.ic.ca.at.ti.io.on.n

  There are comments within the file which will help you. However, some
  basic information will help you there.



  +.o  You will find text displayed on the application's pages here as
     well as default settings for several aspects of the application,
     database fields and their use and existence within the application
     and so on.

  +.o  It will probably help if you look at more than one application from
     the distribution; you will see that by editing the file the right
     way, you can create way different things.

  +.o  If you need fields for your new application for which there are no
     fields in the database table, just reuse a field which you do not
     need.  All field mapping is specified in language files (so there
     is no table in database for that). Lets look in en_news_lang.php3
     file, where English version of News AA is defined. There is "Input
     form field names" section:


       ______________________________________________________________________
          # Input form field names
          define("L_HEADLINE", "Headline");
          define("L_ABSTRACT", "Summary");
          define("L_FULL_TEXT", "News");
          define("L_FT_FORMATTING", "Formatting");
          define("L_FT_FORMATTING_HTML", "HTML code");
          define("L_FT_FORMATTING_PLAIN", "Plain text");
          define("L_POSTDATE", "Post date");
          define("L_POSTED_BY", "Author");
          define("L_E_POSTED_BY","Author's e-mail");
          define("L_PUBLISH_DATE", "Publish date");
          define("L_EXPIRY_DATE", "Expiry date");
          define("L_CATEGORY", "Category");
          define("L_STATUS_CODE", "News status");
          define("L_LANGUAGE_CODE", "Language");
          define("L_CP_CODE", "Encoding");
          define("L_LINK_ONLY", "External news");
          define("L_HL_HREF", "External news URL");
          define("L_HTML_FORMATTED", "HTML formatted");
          define("L_HIGHLIGHT", "Highlight");
          define("L_IMG_SRC","Image URL");
          define("L_IMG_WIDTH","Image width");
          define("L_IMG_HEIGHT","Image height");
          define("L_PLACE","Locality");
          define("L_SOURCE","Source ");
          define("L_SOURCE_HREF","Source URL");
          define("L_CREATED_BY","Written by");
          define("L_LASTEDIT","Last edited by");
          define("L_AT","at");
          define("L_EDIT_NOTE","Editor's note");
          define("L_IMG_UPLOAD","Image upload");
       ______________________________________________________________________




  In this section you can set how the names of fields in item table are
  displayed to the user in this Action Application.

  In other words, database fields are not renamed; only the user sees a
  different name for the field. From the perspective of the Action
  Applications, the fields are not different.

  +.o  If you really need more fields than there are in the database for
     the items (the table _.i_.t_.e_.m_.s contains them), you will have to tweak
     the program a bit more. Read this developer note to get the
     picture.  This process is not covered any further by this document
     at this point in time.
          May be, there are some fields, we have to add to the items table. I
          think, we can call it like foo ... - the fields can be then used
          specifically to each AA. When we talking about contact information,
          there are three fields contact1, contact2 and contact3 in items table
          - they are not used yet, but I think, we should remove it (or rename
          to foo1, foo2 ... - see above). The idea of holding it here is not
          good, because of limit three contacts (see AAdb E-R diagram). I prefer
          to create new table contact and connect it to items table via items.id
          (foreign key).

          Here some comments I posted before via e-mail:

          From my point of view I prefer using existing fields in item table,
          if it is possible. I know, there is no field for long binary data, so
          I agree with creating of new such field in item table. It will be
          useful to add Long_binary_type column, which keep the type of data
          are there stored. On the other hand, if there are more than these
          columns, which you want to add to item table, I prefer to create the
          new table with additional informations for your action application and
          link it in optional 1:1 relation to item table. I don't want to expand
          item table to infinity as far as the number of new applications will
          increase.

          The possible solution can be to create new constant (in language file
          - see below) which then will be added to SQL commands used in toolkit
          script. Example: define(AA_SPECIFIC_ITEM_TABLE_JOIN, ",radio LEFT JOIN
          ON items.id = radio.item_id") and then use: $SQL= "SELECT FROM items
          ". AA_SPECIFIC_ITEM_TABLE_JOIN ." WHERE ....";

          If you find better solution, you are welcome, of course.

          I know, it's look funny to have one table for all application, but
          there are two reasons for that: 1) You can exchange (feed) items from
          one application to another one (the new application can be done very
          easy - by modifying language file - so I think, there could be quite a
          lot of very similar applications - the data exchange between them make
          sense). 2) You can very easy search in database for some keyword and
          you find it in all applications.

          I think, the current set of fields is sufficient for most applications
          - job listing, grant database, news, action alerts, press release ...
          All these applications use title, summary, Fulltext, some kind of source
          ... Maybe it is not enough for Amarc, but if you will not use images
          in Amarc, you can use image fields for that (source, width, height).
          (It looks like mixing apples with plums, but all this fields belongs
          to multimedia data so it is not so bad.)

          The reason why we use no boolean fields is database independence.
          Jirka made an database research and his proposal is to use numeric
          field instead of boolean.
















  6.6...  S.Se.ec.cu.ur.ri.it.ty.y I.Is.ss.su.ue.es.s

  6.6...1.1...  S.Se.er.rv.ve.er.r S.Si.id.de.e I.In.nc.cl.lu.ud.de.es.s

  The directories which contain the user pages must be enabled for SSI
  (server side includes). This is a major security hole if untrusted
  people can alter pages in these directories. Only enable SSI for
  directories where it is needed. You can put the statement which
  enables it into per directory directives in the apache http server
  configuration file, for example, like this (snipped from
  /etc/httpd/conf/httpd.conf:


       ______________________________________________________________________
       <Directory /home/httpd/html/aa/user-x/>
       Options +Includes
       </Directory>
       ______________________________________________________________________




  This also suggests to put all Action Application user pages into a
  common directory structure and not into the normal user's htdocs tree,
  so control over the pages can easily be separated.

  6.6...2.2...  c.co.on.nf.fi.ig.g...p.ph.hp.p3.3 p.pe.er.rm.mi.is.ss.si.io.on.ns.s

  The http server must be able to access the include/config.php3 file,
  but this file contains passwords, so it should not be world readable.

  One possible common solution for this is that you create a unix group
  for your http server and make the config.php3 file belong to that
  group and be group readable. The steps to do this would be:

  +.o  Create unix group, for example, _.w_.w_.w. On RedHat Linux, this can be
     done like this:


       ______________________________________________________________________
       # groupadd -r www

       ______________________________________________________________________




  +.o  Edit /etc/httpd/conf/httpd.conf and alter the line


       ______________________________________________________________________
       Group nobody

       ______________________________________________________________________




  to


       ______________________________________________________________________
       Group www

       ______________________________________________________________________

  +.o  Change file permissions in config.php3 and restart the server.


       ______________________________________________________________________
       # chown root.www /home/httpd/html/aa/include/config.php3
       # chmod 640  /home/httpd/html/aa/include/config.php3
       # /etc/rc.d/init.d/httpd stop
       # /etc/rc.d/init.d/httpd start

       ______________________________________________________________________
























































  7.7...  M.Ma.ai.in.nt.te.en.na.an.nc.ce.e

  There is no maintenance to do, except that you must watch out always
  to have enough disk space for all the data.






























































  8.8...  C.Co.on.nt.ta.ac.ct.ti.in.ng.g t.th.he.e D.De.ev.ve.el.lo.op.pe.er.rs.s

  The Action Applications were developed by the _.A_.s_.s_.o_.c_.i_.a_.t_.i_.o_.n _.f_.o_.r
  _.P_.r_.o_.g_.r_.e_.s_.s_.i_.v_.e _.C_.o_.m_.m_.u_.n_.i_.c_.a_.t_.i_.o_.n_.s,  <http://www.apc.org/>. They are released
  as open source and there is set up a project at SourceForge. The
  Action Applications SourceForge page can be found at
  <http://sourceforge.net/projects/apc-aa/>.

  If Sourceforge is unavailable, email ... for further information.

























































                            T.Ta.ab.bl.le.e o.of.f C.Co.on.nt.te.en.nt.ts.s


  1. Introduction  . . . . . . . . . . . . . . . . . . . . . . . . .   4
  1.1. Overview  . . . . . . . . . . . . . . . . . . . . . . . . . .   4
  1.2. Slices  . . . . . . . . . . . . . . . . . . . . . . . . . . .   4
  1.3. Users, Roles and Permissions  . . . . . . . . . . . . . . . .   4
  1.4. Action Applications Software Components . . . . . . . . . . .   5
  1.5. Conventions used in this document . . . . . . . . . . . . . .   6
  2. Requirements / Preconditions / Suggested Environment  . . . . .   7
  2.1. Hardware Requirements . . . . . . . . . . . . . . . . . . . .   7
  2.2. Software Requirements . . . . . . . . . . . . . . . . . . . .   7
  2.2.1. Operating System  . . . . . . . . . . . . . . . . . . . . .   7
  2.2.2. Database Server . . . . . . . . . . . . . . . . . . . . . .   7
  2.2.3. Permission System . . . . . . . . . . . . . . . . . . . . .   7
  2.2.4. WWW (http) Server . . . . . . . . . . . . . . . . . . . . .   8
  2.2.5. PHP . . . . . . . . . . . . . . . . . . . . . . . . . . . .   8
  2.3. Know-How Requirements . . . . . . . . . . . . . . . . . . . .   9
  2.3.1. Other Preconditions . . . . . . . . . . . . . . . . . . . .   9
  3. Installation of Other Packages needed by Action Applica-
  tions  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  10
  3.1. Platform  . . . . . . . . . . . . . . . . . . . . . . . . . .  10
  3.2. MySQL database back end . . . . . . . . . . . . . . . . . . .  10
  3.3. OpenLDAP  . . . . . . . . . . . . . . . . . . . . . . . . . .  11
  3.3.1. Package Installation  . . . . . . . . . . . . . . . . . . .  11
  3.3.2. Setup: Configuration  . . . . . . . . . . . . . . . . . . .  12
  3.3.3. Start the ldap server . . . . . . . . . . . . . . . . . . .  13
  3.3.4. Initial database creation . . . . . . . . . . . . . . . . .  13
  3.3.5. LDAP passwords  . . . . . . . . . . . . . . . . . . . . . .  15
  3.4. Installing the Apache Web Server  . . . . . . . . . . . . . .  16
  3.5. PHP3  . . . . . . . . . . . . . . . . . . . . . . . . . . . .  16
  3.5.1. PHP3 installation . . . . . . . . . . . . . . . . . . . . .  16
  3.5.2. Testing php3 installation . . . . . . . . . . . . . . . . .  16
  3.5.3. Installing PHP  . . . . . . . . . . . . . . . . . . . . . .  17
  3.5.4. Building the PHP RPMs including mysql . . . . . . . . . . .  17
  3.5.5. Building PHP3 without RPMs  . . . . . . . . . . . . . . . .  19
  3.6. Configuring the apache web server . . . . . . . . . . . . . .  19
  3.7. PHPLIB installation . . . . . . . . . . . . . . . . . . . . .  20
  4. Installation of Action Applications . . . . . . . . . . . . . .  22
  4.1. Installation  . . . . . . . . . . . . . . . . . . . . . . . .  22
  4.2. Creating a superadmin account . . . . . . . . . . . . . . . .  22
  4.3. Your first test slice . . . . . . . . . . . . . . . . . . . .  22
  4.3.1. Creating the first test slice . . . . . . . . . . . . . . .  22
  4.3.2. Adding the first information item to the test slice . . . .  23
  5. Customization . . . . . . . . . . . . . . . . . . . . . . . . .  24
  5.1. Language Customization  . . . . . . . . . . . . . . . . . . .  24
  5.1.1. How it works  . . . . . . . . . . . . . . . . . . . . . . .  24
  5.1.2. Customizing an Action Application to a new language . . . .  25
  5.2. Creating new Action Applications  . . . . . . . . . . . . . .  26
  5.2.1. Overview  . . . . . . . . . . . . . . . . . . . . . . . . .  26
  5.2.2. Editing the language file to create a new Action Appli-
  cation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  26
  6. Security Issues . . . . . . . . . . . . . . . . . . . . . . . .  29
  6.1. Server Side Includes  . . . . . . . . . . . . . . . . . . . .  29
  6.2. config.php3 permissions . . . . . . . . . . . . . . . . . . .  29
  7. Maintenance . . . . . . . . . . . . . . . . . . . . . . . . . .  31
  8. Contacting the Developers . . . . . . . . . . . . . . . . . . .  32









