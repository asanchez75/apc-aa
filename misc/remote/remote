#!/usr/bin/perl -w
#$Id$
# NOTE: you need to change the variable $host
# change it to the remote server that has the script you want to include

$host  = ''; # like 'http://127.0.0.1';
if (! $host ) die "Error -- you need to set \$host";

# Index: 
# 1. usage
# 2. build URL
# 3. add UserAgent object, which has ability to send HTTP requests
# 4. output HTML, probably included as an SSI 

# -------------------------------------------------
# 1. usage

# if this is not called as a webpage, produce usage statement
if ( ! $ENV{PATH_INFO} ) {

    print <<ENDOFHELP
--------------------------------------------------
scriptname: remote
  Include the output of a script on a remote server into a local webpage.

author    : madebeer\@igc.org
license   : released GPL - see http://www.gnu.org/license.html

--------------------------------------------------
Strategic usage: 

  The ActionApps is an easy-to-use content-management system.
    http://www.apc.org/actionapps/

  Imagine a nonprofit wants to start using this system for the news section of 
  their site, but does not want to move their site to a webhost that has
  action applications installed.

  The webmaster could:
   1. Ask a server with the action applications to setup a slice for them
   2. Include their news items from their slice with 'remote', pulling
      these items into news.html, on their local webhost.

  Note: If this script is not fast enough, consider using 'remotec', 
  a version of 'remote' with caching.  A version of 'remote' in 
  php would be even faster -- patches welcome.

--------------------------------------------------
Technical usage: 

'remote' is used as an SSI inside an html page. 
For example, if you wanted to include the page
   http://www.gn.apc.org/slice.php3
And your page was not on www.gn.apc.org, you would put this 
HTML code in your page (setting the \$host variable first):
   <!--#include virtual="/cgi/remote/slice.php3"-->

'remote' only works with GET (not POST) commands. 
You can use URL parameters, like:
<!--#include 
       virtual="/cgi-bin/remote/apc-aa/view.php3?vid=11&als[MY_ALIAS]=3"-->

ENDOFHELP
    ;
    exit;
}

# -------------------------------------------------
# 2. build URL

# we need a the next line, or get an HTTP error. 
# it goes first, so if there is an error, we see it in the web browser
print "Content-type:text/html\n\n";

# build the URL of the page we are going to request
$path  = $ENV{PATH_INFO};
$query = $ENV{QUERY_STRING};
$url = $host . $path . "?$query";

# -------------------------------------------------
# 3. add UserAgent object, which has ability to send HTTP requests

use LWP::UserAgent;
my $ua = new LWP::UserAgent;
my $res = $ua->request(HTTP::Request->new(GET => $url));

# -------------------------------------------------
# 4. output HTML, probably included as an SSI 

if ( $res->is_success() ) { 
    print $res->content 
} else {
    print "<HR>error in from script: $0<BR>Trying to get $url. Result was:", 
          $res->content, "<HR>";
};
__END__
#$Log$
#Revision 1.4  2005/06/03 00:36:33  honzam
#strings in AA uses "ActionApps" name instead of "APC Action Apps"
#
#Revision 1.3  2001/10/19 06:46:48  madebeer
#added checks for $host
#
#Revision 1.2  2001/10/19 06:44:39  madebeer
#nulled out $host variable, for security reasons
#
#Revision 1.1  2001/10/19 06:16:44  madebeer
#added helper scripts - different versions of remote.
#remote allows remote servers to use apc-aa content in SSIs
#
